# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def ctrl(ierr, p, v, logR, w, p_d, v_d, a_d, w_d, theta_pos, theta_rot, dt):
    # type: (numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, float) -> T.Tuple[numpy.ndarray, numpy.ndarray]
    """
    This function was autogenerated from a symbolic function. Do not modify by hand.

    Symbolic function: ctrl_symfn

    Args:
        ierr: Matrix31
        p: Matrix31
        v: Matrix31
        logR: Matrix31
        w: Matrix31
        p_d: Matrix31
        v_d: Matrix31
        a_d: Matrix31
        w_d: Matrix31
        theta_pos: Matrix61
        theta_rot: Matrix41
        dt: Scalar

    Outputs:
        thrust_torque: Matrix41
        jacobian: (4x25) jacobian of thrust_torque wrt args ierr (3), p (3), v (3), logR (3), w (3),
                  theta_pos (6), theta_rot (4)
    """

    # Total ops: 1506

    # Input arrays
    if ierr.shape == (3,):
        ierr = ierr.reshape((3, 1))
    elif ierr.shape != (3, 1):
        raise IndexError(
            "ierr is expected to have shape (3, 1) or (3,); instead had shape {}".format(ierr.shape)
        )

    if p.shape == (3,):
        p = p.reshape((3, 1))
    elif p.shape != (3, 1):
        raise IndexError(
            "p is expected to have shape (3, 1) or (3,); instead had shape {}".format(p.shape)
        )

    if v.shape == (3,):
        v = v.reshape((3, 1))
    elif v.shape != (3, 1):
        raise IndexError(
            "v is expected to have shape (3, 1) or (3,); instead had shape {}".format(v.shape)
        )

    if logR.shape == (3,):
        logR = logR.reshape((3, 1))
    elif logR.shape != (3, 1):
        raise IndexError(
            "logR is expected to have shape (3, 1) or (3,); instead had shape {}".format(logR.shape)
        )

    if w.shape == (3,):
        w = w.reshape((3, 1))
    elif w.shape != (3, 1):
        raise IndexError(
            "w is expected to have shape (3, 1) or (3,); instead had shape {}".format(w.shape)
        )

    if p_d.shape == (3,):
        p_d = p_d.reshape((3, 1))
    elif p_d.shape != (3, 1):
        raise IndexError(
            "p_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(p_d.shape)
        )

    if v_d.shape == (3,):
        v_d = v_d.reshape((3, 1))
    elif v_d.shape != (3, 1):
        raise IndexError(
            "v_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(v_d.shape)
        )

    if a_d.shape == (3,):
        a_d = a_d.reshape((3, 1))
    elif a_d.shape != (3, 1):
        raise IndexError(
            "a_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(a_d.shape)
        )

    if w_d.shape == (3,):
        w_d = w_d.reshape((3, 1))
    elif w_d.shape != (3, 1):
        raise IndexError(
            "w_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(w_d.shape)
        )

    if theta_pos.shape == (6,):
        theta_pos = theta_pos.reshape((6, 1))
    elif theta_pos.shape != (6, 1):
        raise IndexError(
            "theta_pos is expected to have shape (6, 1) or (6,); instead had shape {}".format(
                theta_pos.shape
            )
        )

    if theta_rot.shape == (4,):
        theta_rot = theta_rot.reshape((4, 1))
    elif theta_rot.shape != (4, 1):
        raise IndexError(
            "theta_rot is expected to have shape (4, 1) or (4,); instead had shape {}".format(
                theta_rot.shape
            )
        )

    # Intermediate terms (349)
    _tmp0 = math.exp(theta_pos[2, 0])
    _tmp1 = _tmp0 * (p[0, 0] - p_d[0, 0])
    _tmp2 = math.exp(theta_pos[4, 0])
    _tmp3 = _tmp2 * (v[0, 0] - v_d[0, 0])
    _tmp4 = math.exp(theta_pos[0, 0])
    _tmp5 = _tmp4 * ierr[0, 0]
    _tmp6 = -_tmp1 - _tmp3 - _tmp5 + a_d[0, 0]
    _tmp7 = logR[0, 0] ** 2
    _tmp8 = logR[2, 0] ** 2
    _tmp9 = logR[1, 0] ** 2
    _tmp10 = _tmp7 + _tmp8 + _tmp9 + 1.0e-12
    _tmp11 = 1 / _tmp10
    _tmp12 = math.sqrt(_tmp10)
    _tmp13 = (1.0 / 2.0) * _tmp12
    _tmp14 = math.sin(_tmp13)
    _tmp15 = _tmp14**2
    _tmp16 = _tmp11 * _tmp15
    _tmp17 = 2 * _tmp16
    _tmp18 = _tmp17 * logR[2, 0]
    _tmp19 = _tmp14 / _tmp12
    _tmp20 = _tmp19 * logR[1, 0]
    _tmp21 = math.cos(_tmp13)
    _tmp22 = 2 * _tmp21
    _tmp23 = _tmp18 * logR[0, 0] + _tmp20 * _tmp22
    _tmp24 = _tmp16 * _tmp9
    _tmp25 = _tmp16 * _tmp7
    _tmp26 = -2 * _tmp24 - 2 * _tmp25 + 1
    _tmp27 = math.exp(theta_pos[3, 0])
    _tmp28 = _tmp27 * (p[2, 0] - p_d[2, 0])
    _tmp29 = math.exp(theta_pos[5, 0])
    _tmp30 = _tmp29 * (v[2, 0] - v_d[2, 0])
    _tmp31 = math.exp(theta_pos[1, 0])
    _tmp32 = _tmp31 * ierr[2, 0]
    _tmp33 = -_tmp28 - _tmp30 - _tmp32 + a_d[2, 0] + 9.81
    _tmp34 = p[1, 0] - p_d[1, 0]
    _tmp35 = _tmp0 * _tmp34
    _tmp36 = v[1, 0] - v_d[1, 0]
    _tmp37 = _tmp2 * _tmp36
    _tmp38 = _tmp4 * ierr[1, 0]
    _tmp39 = -_tmp35 - _tmp37 - _tmp38 + a_d[1, 0]
    _tmp40 = _tmp19 * logR[0, 0]
    _tmp41 = _tmp18 * logR[1, 0] - _tmp22 * _tmp40
    _tmp42 = _tmp33**2
    _tmp43 = _tmp39**2
    _tmp44 = _tmp6**2
    _tmp45 = _tmp42 + _tmp43 + _tmp44 + 1.0e-6
    _tmp46 = 1 / math.sqrt(_tmp45)
    _tmp47 = _tmp39 * _tmp46
    _tmp48 = _tmp33 * _tmp46
    _tmp49 = 2 * _tmp48 + 2.000001
    _tmp50 = math.sqrt(_tmp49)
    _tmp51 = 1 / _tmp50
    _tmp52 = (
        0.0 if abs(_tmp48 + 1) - 1.0e-6 == 0 else math.copysign(1, abs(_tmp48 + 1) - 1.0e-6)
    ) + 1
    _tmp53 = (1.0 / 2.0) * _tmp52
    _tmp54 = _tmp51 * _tmp53
    _tmp55 = -_tmp47 * _tmp54 - _tmp53 + 1
    _tmp56 = _tmp21 * _tmp55
    _tmp57 = _tmp19 * logR[2, 0]
    _tmp58 = _tmp46 * _tmp54
    _tmp59 = _tmp58 * _tmp6
    _tmp60 = (1.0 / 4.0) * _tmp50
    _tmp61 = _tmp52 * _tmp60
    _tmp62 = _tmp40 * _tmp61 - _tmp56 + _tmp57 * _tmp59
    _tmp63 = math.exp(theta_rot[0, 0])
    _tmp64 = _tmp20 * _tmp59
    _tmp65 = _tmp19 * _tmp55
    _tmp66 = _tmp65 * logR[0, 0]
    _tmp67 = -_tmp64 - _tmp66
    _tmp68 = _tmp21 * _tmp52
    _tmp69 = _tmp60 * _tmp68
    _tmp70 = 2 * min(0, (0.0 if -_tmp67 + _tmp69 == 0 else math.copysign(1, -_tmp67 + _tmp69))) + 1
    _tmp71 = 2 * _tmp70
    _tmp72 = _tmp63 * _tmp71
    _tmp73 = _tmp62 * _tmp72
    _tmp74 = min(0.999999, abs(_tmp67 - _tmp69))
    _tmp75 = math.acos(_tmp74) / math.sqrt(1 - _tmp74**2)
    _tmp76 = math.exp(theta_rot[2, 0])
    _tmp77 = w[0, 0] - w_d[0, 0]
    _tmp78 = -_tmp76 * _tmp77
    _tmp79 = _tmp21 * _tmp58
    _tmp80 = _tmp65 * logR[2, 0]
    _tmp81 = _tmp20 * _tmp61 - _tmp6 * _tmp79 - _tmp80
    _tmp82 = w[1, 0] - w_d[1, 0]
    _tmp83 = -_tmp76 * _tmp82
    _tmp84 = _tmp65 * logR[1, 0]
    _tmp85 = -_tmp40 * _tmp59 + _tmp57 * _tmp61 + _tmp84
    _tmp86 = math.exp(theta_rot[1, 0])
    _tmp87 = _tmp71 * _tmp86
    _tmp88 = math.exp(theta_rot[3, 0])
    _tmp89 = w[2, 0] - w_d[2, 0]
    _tmp90 = -_tmp88 * _tmp89
    _tmp91 = _tmp33 * _tmp4
    _tmp92 = _tmp45 ** (-3.0 / 2.0)
    _tmp93 = (1.0 / 4.0) * _tmp68
    _tmp94 = _tmp6 * _tmp93
    _tmp95 = _tmp51 * _tmp94
    _tmp96 = _tmp92 * _tmp95
    _tmp97 = _tmp49 ** (-3.0 / 2.0)
    _tmp98 = _tmp97 / _tmp45**2
    _tmp99 = _tmp53 * _tmp98
    _tmp100 = _tmp44 * _tmp99
    _tmp101 = _tmp20 * _tmp91
    _tmp102 = _tmp4 * _tmp58
    _tmp103 = _tmp39 * _tmp99
    _tmp104 = _tmp103 * _tmp6
    _tmp105 = _tmp104 * _tmp91
    _tmp106 = _tmp39 * _tmp92
    _tmp107 = _tmp106 * _tmp6
    _tmp108 = _tmp107 * _tmp54
    _tmp109 = _tmp108 * _tmp4
    _tmp110 = _tmp105 - _tmp109
    _tmp111 = _tmp44 * _tmp92
    _tmp112 = _tmp111 * _tmp54
    _tmp113 = _tmp112 * _tmp4
    _tmp114 = (
        -_tmp100 * _tmp101
        - _tmp102 * _tmp20
        + _tmp110 * _tmp40
        + _tmp113 * _tmp20
        + _tmp91 * _tmp96
    )
    _tmp115 = _tmp64 + _tmp66 + _tmp69
    _tmp116 = abs(_tmp115)
    _tmp117 = min(0.999999, _tmp116)
    _tmp118 = 1 - _tmp117**2
    _tmp119 = (
        _tmp70
        * ((0.0 if 0.999999 - _tmp116 == 0 else math.copysign(1, 0.999999 - _tmp116)) + 1)
        * (0.0 if _tmp115 == 0 else math.copysign(1, _tmp115))
    )
    _tmp120 = _tmp119 / _tmp118
    _tmp121 = _tmp62 * _tmp63
    _tmp122 = _tmp120 * _tmp121
    _tmp123 = math.acos(_tmp117)
    _tmp124 = _tmp117 * _tmp119 * _tmp123 / _tmp118 ** (3.0 / 2.0)
    _tmp125 = _tmp121 * _tmp124
    _tmp126 = (1.0 / 4.0) * _tmp52
    _tmp127 = _tmp126 * _tmp51
    _tmp128 = _tmp127 * _tmp6
    _tmp129 = _tmp128 * _tmp92
    _tmp130 = _tmp40 * _tmp91
    _tmp131 = _tmp57 * _tmp91
    _tmp132 = _tmp123 / math.sqrt(_tmp118)
    _tmp133 = _tmp132 * _tmp72
    _tmp134 = _tmp132 * _tmp73
    _tmp135 = 1 - math.tanh((1.0 / 268.0) * _tmp134 - 1.0 / 268.0 * _tmp78) ** 2
    _tmp136 = _tmp21 * _tmp44
    _tmp137 = _tmp136 * _tmp92
    _tmp138 = _tmp137 * _tmp54
    _tmp139 = _tmp136 * _tmp99
    _tmp140 = _tmp63 * _tmp81
    _tmp141 = _tmp124 * _tmp140
    _tmp142 = _tmp120 * _tmp140
    _tmp143 = _tmp133 * _tmp81
    _tmp144 = 1 - math.tanh((1.0 / 268.0) * _tmp143 - 1.0 / 268.0 * _tmp83) ** 2
    _tmp145 = _tmp85 * _tmp86
    _tmp146 = _tmp124 * _tmp145
    _tmp147 = _tmp120 * _tmp145
    _tmp148 = _tmp132 * _tmp87
    _tmp149 = _tmp148 * _tmp85
    _tmp150 = 1 - math.tanh((1.0 / 56.0) * _tmp149 - 1.0 / 56.0 * _tmp90) ** 2
    _tmp151 = _tmp4 * _tmp41
    _tmp152 = _tmp43 * _tmp99
    _tmp153 = _tmp152 * _tmp33
    _tmp154 = _tmp43 * _tmp92
    _tmp155 = _tmp154 * _tmp54
    _tmp156 = _tmp102 + _tmp153 * _tmp4 - _tmp155 * _tmp4
    _tmp157 = _tmp106 * _tmp51 * _tmp93
    _tmp158 = -_tmp105 * _tmp20 + _tmp109 * _tmp20 + _tmp156 * _tmp40 + _tmp157 * _tmp91
    _tmp159 = _tmp106 * _tmp127
    _tmp160 = _tmp120 * _tmp158
    _tmp161 = _tmp21 * _tmp6
    _tmp162 = _tmp103 * _tmp161
    _tmp163 = _tmp159 * _tmp57
    _tmp164 = _tmp33 * _tmp54
    _tmp165 = _tmp106 * _tmp164
    _tmp166 = 2 * _tmp46
    _tmp167 = 2 * _tmp42
    _tmp168 = _tmp167 * _tmp92
    _tmp169 = -_tmp166 * _tmp31 + _tmp168 * _tmp31
    _tmp170 = _tmp126 * _tmp47
    _tmp171 = _tmp170 * _tmp97
    _tmp172 = -_tmp165 * _tmp31 + _tmp169 * _tmp171
    _tmp173 = _tmp164 * _tmp92
    _tmp174 = _tmp173 * _tmp6
    _tmp175 = _tmp174 * _tmp20
    _tmp176 = (1.0 / 8.0) * _tmp68
    _tmp177 = _tmp176 * _tmp51
    _tmp178 = _tmp46 * _tmp6
    _tmp179 = _tmp178 * _tmp97
    _tmp180 = _tmp126 * _tmp179
    _tmp181 = _tmp169 * _tmp180
    _tmp182 = _tmp169 * _tmp177 + _tmp172 * _tmp40 + _tmp175 * _tmp31 - _tmp181 * _tmp20
    _tmp183 = (1.0 / 8.0) * _tmp52
    _tmp184 = _tmp183 * _tmp51
    _tmp185 = _tmp184 * _tmp40
    _tmp186 = _tmp174 * _tmp57
    _tmp187 = _tmp161 * _tmp173
    _tmp188 = _tmp184 * _tmp20
    _tmp189 = _tmp179 * _tmp93
    _tmp190 = _tmp174 * _tmp40
    _tmp191 = _tmp184 * _tmp57
    _tmp192 = _tmp0 * _tmp112
    _tmp193 = _tmp0 * _tmp33
    _tmp194 = _tmp0 * _tmp58
    _tmp195 = _tmp100 * _tmp193
    _tmp196 = _tmp0 * _tmp108
    _tmp197 = _tmp193 * _tmp6
    _tmp198 = _tmp103 * _tmp197
    _tmp199 = -_tmp196 + _tmp198
    _tmp200 = (
        _tmp192 * _tmp20 + _tmp193 * _tmp96 - _tmp194 * _tmp20 - _tmp195 * _tmp20 + _tmp199 * _tmp40
    )
    _tmp201 = _tmp127 * _tmp197 * _tmp92
    _tmp202 = _tmp193 * _tmp40
    _tmp203 = _tmp0 * _tmp41
    _tmp204 = _tmp0 * _tmp153 - _tmp0 * _tmp155 + _tmp194
    _tmp205 = _tmp157 * _tmp193 + _tmp196 * _tmp20 - _tmp198 * _tmp20 + _tmp204 * _tmp40
    _tmp206 = _tmp159 * _tmp20
    _tmp207 = -_tmp166 * _tmp27 + _tmp168 * _tmp27
    _tmp208 = _tmp207 * _tmp97
    _tmp209 = -_tmp165 * _tmp27 + _tmp170 * _tmp208
    _tmp210 = _tmp126 * _tmp20
    _tmp211 = _tmp178 * _tmp208
    _tmp212 = _tmp175 * _tmp27 + _tmp177 * _tmp207 + _tmp209 * _tmp40 - _tmp210 * _tmp211
    _tmp213 = _tmp126 * _tmp211
    _tmp214 = _tmp178 * _tmp93
    _tmp215 = _tmp2 * _tmp58
    _tmp216 = _tmp2 * _tmp33
    _tmp217 = _tmp20 * _tmp216
    _tmp218 = _tmp104 * _tmp216
    _tmp219 = _tmp2 * _tmp54
    _tmp220 = _tmp107 * _tmp219
    _tmp221 = _tmp218 - _tmp220
    _tmp222 = _tmp111 * _tmp219
    _tmp223 = (
        -_tmp100 * _tmp217
        - _tmp20 * _tmp215
        + _tmp20 * _tmp222
        + _tmp216 * _tmp96
        + _tmp221 * _tmp40
    )
    _tmp224 = _tmp216 * _tmp57
    _tmp225 = _tmp216 * _tmp40
    _tmp226 = _tmp2 * _tmp41
    _tmp227 = _tmp152 * _tmp216 - _tmp154 * _tmp219 + _tmp215
    _tmp228 = _tmp157 * _tmp216 - _tmp20 * _tmp218 + _tmp20 * _tmp220 + _tmp227 * _tmp40
    _tmp229 = _tmp29 * _tmp92
    _tmp230 = _tmp164 * _tmp229
    _tmp231 = -_tmp166 * _tmp29 + _tmp167 * _tmp229
    _tmp232 = _tmp171 * _tmp231 - _tmp230 * _tmp39
    _tmp233 = _tmp57 * _tmp6
    _tmp234 = _tmp180 * _tmp57
    _tmp235 = _tmp230 * _tmp6
    _tmp236 = _tmp180 * _tmp20
    _tmp237 = _tmp177 * _tmp231 + _tmp20 * _tmp235 - _tmp231 * _tmp236 + _tmp232 * _tmp40
    _tmp238 = _tmp180 * _tmp40
    _tmp239 = _tmp11 * _tmp21**2
    _tmp240 = _tmp19 * _tmp22
    _tmp241 = _tmp14 / _tmp10 ** (3.0 / 2.0)
    _tmp242 = _tmp22 * _tmp241
    _tmp243 = _tmp242 * _tmp7
    _tmp244 = logR[0, 0] * logR[1, 0]
    _tmp245 = 4 * _tmp15 / _tmp10**2
    _tmp246 = _tmp245 * logR[2, 0]
    _tmp247 = _tmp242 * _tmp244
    _tmp248 = -_tmp244 * _tmp246 + _tmp247 * logR[2, 0]
    _tmp249 = _tmp245 * _tmp9
    _tmp250 = logR[0, 0] ** 3
    _tmp251 = 4 * _tmp16
    _tmp252 = _tmp242 * _tmp9
    _tmp253 = _tmp243 * logR[2, 0]
    _tmp254 = _tmp239 * _tmp244
    _tmp255 = _tmp16 * _tmp244
    _tmp256 = _tmp246 * _tmp7
    _tmp257 = logR[0, 0] * logR[2, 0]
    _tmp258 = _tmp214 * _tmp51
    _tmp259 = _tmp11 * _tmp258
    _tmp260 = _tmp257 * _tmp259
    _tmp261 = _tmp241 * _tmp61
    _tmp262 = _tmp19 * _tmp61
    _tmp263 = _tmp11 * _tmp7
    _tmp264 = _tmp176 * _tmp50
    _tmp265 = _tmp241 * _tmp59
    _tmp266 = _tmp257 * _tmp265
    _tmp267 = _tmp244 * _tmp259
    _tmp268 = (1.0 / 2.0) * _tmp56
    _tmp269 = _tmp183 * _tmp50
    _tmp270 = _tmp244 * _tmp265
    _tmp271 = _tmp241 * _tmp55
    _tmp272 = _tmp263 * _tmp268 + _tmp267 - _tmp269 * _tmp40 - _tmp270 - _tmp271 * _tmp7 + _tmp65
    _tmp273 = _tmp11 * _tmp268
    _tmp274 = _tmp257 * _tmp273
    _tmp275 = _tmp257 * _tmp271
    _tmp276 = _tmp127 * _tmp178
    _tmp277 = _tmp11 * _tmp264
    _tmp278 = -_tmp244 * _tmp261 + _tmp244 * _tmp277
    _tmp279 = _tmp19 * _tmp59
    _tmp280 = -_tmp244 * _tmp271 + _tmp244 * _tmp273
    _tmp281 = -_tmp257 * _tmp261 + _tmp257 * _tmp277
    _tmp282 = _tmp249 * logR[2, 0]
    _tmp283 = _tmp252 * logR[2, 0]
    _tmp284 = _tmp245 * logR[1, 0]
    _tmp285 = logR[1, 0] ** 3
    _tmp286 = -_tmp20 * _tmp269 + _tmp259 * _tmp9 - _tmp265 * _tmp9 + _tmp279 + _tmp280
    _tmp287 = logR[1, 0] * logR[2, 0]
    _tmp288 = _tmp259 * _tmp287 - _tmp265 * _tmp287
    _tmp289 = _tmp271 * _tmp287
    _tmp290 = _tmp273 * _tmp287
    _tmp291 = -_tmp261 * _tmp287 + _tmp277 * _tmp287
    _tmp292 = _tmp8 * logR[0, 0]
    _tmp293 = _tmp11 * _tmp8
    _tmp294 = -_tmp269 * _tmp57 + _tmp274 - _tmp275 + _tmp288
    _tmp295 = _tmp135 * _tmp76
    _tmp296 = _tmp144 * _tmp76
    _tmp297 = _tmp150 * _tmp88
    _tmp298 = 2 * _tmp6
    _tmp299 = 2 * _tmp39
    _tmp300 = -_tmp298 * _tmp5 - _tmp299 * _tmp38
    _tmp301 = _tmp33 * _tmp98
    _tmp302 = _tmp126 * _tmp39
    _tmp303 = _tmp301 * _tmp302
    _tmp304 = _tmp159 * _tmp300 - _tmp300 * _tmp303 + _tmp38 * _tmp58
    _tmp305 = _tmp210 * _tmp6
    _tmp306 = _tmp301 * _tmp305
    _tmp307 = _tmp5 * _tmp58
    _tmp308 = _tmp300 * _tmp92
    _tmp309 = _tmp177 * _tmp33
    _tmp310 = _tmp128 * _tmp308
    _tmp311 = (
        -_tmp20 * _tmp307
        - _tmp20 * _tmp310
        + _tmp300 * _tmp306
        + _tmp304 * _tmp40
        - _tmp308 * _tmp309
    )
    _tmp312 = _tmp126 * _tmp301
    _tmp313 = _tmp233 * _tmp312
    _tmp314 = _tmp308 * _tmp33
    _tmp315 = _tmp57 * _tmp58
    _tmp316 = _tmp301 * _tmp94
    _tmp317 = _tmp40 * _tmp6
    _tmp318 = _tmp312 * _tmp317
    _tmp319 = -_tmp166 * _tmp32 + _tmp168 * _tmp32
    _tmp320 = -_tmp165 * _tmp32 + _tmp171 * _tmp319
    _tmp321 = _tmp175 * _tmp32 + _tmp177 * _tmp319 - _tmp236 * _tmp319 + _tmp320 * _tmp40
    _tmp322 = -_tmp1 * _tmp298 - _tmp299 * _tmp35
    _tmp323 = _tmp159 * _tmp322 - _tmp303 * _tmp322 + _tmp35 * _tmp58
    _tmp324 = _tmp322 * _tmp92
    _tmp325 = _tmp128 * _tmp324
    _tmp326 = _tmp324 * _tmp33
    _tmp327 = _tmp1 * _tmp58
    _tmp328 = (
        -_tmp20 * _tmp325
        - _tmp20 * _tmp327
        + _tmp306 * _tmp322
        - _tmp309 * _tmp324
        + _tmp323 * _tmp40
    )
    _tmp329 = -_tmp166 * _tmp28 + _tmp168 * _tmp28
    _tmp330 = _tmp179 * _tmp329
    _tmp331 = _tmp126 * _tmp330
    _tmp332 = -_tmp165 * _tmp28 + _tmp171 * _tmp329
    _tmp333 = _tmp175 * _tmp28 + _tmp177 * _tmp329 - _tmp20 * _tmp331 + _tmp332 * _tmp40
    _tmp334 = _tmp3 * _tmp58
    _tmp335 = -_tmp298 * _tmp3 - _tmp299 * _tmp37
    _tmp336 = _tmp301 * _tmp335
    _tmp337 = _tmp159 * _tmp335 - _tmp302 * _tmp336 + _tmp37 * _tmp58
    _tmp338 = _tmp19 * _tmp337
    _tmp339 = _tmp335 * _tmp92
    _tmp340 = _tmp128 * _tmp339
    _tmp341 = (
        -_tmp20 * _tmp334
        - _tmp20 * _tmp340
        + _tmp305 * _tmp336
        - _tmp309 * _tmp339
        + _tmp338 * logR[0, 0]
    )
    _tmp342 = _tmp120 * _tmp341
    _tmp343 = _tmp33 * _tmp339
    _tmp344 = _tmp126 * _tmp336
    _tmp345 = -_tmp166 * _tmp30 + _tmp168 * _tmp30
    _tmp346 = -_tmp165 * _tmp30 + _tmp171 * _tmp345
    _tmp347 = _tmp180 * _tmp345
    _tmp348 = _tmp175 * _tmp30 + _tmp177 * _tmp345 - _tmp20 * _tmp347 + _tmp346 * _tmp40

    # Output terms
    _thrust_torque = numpy.zeros(4)
    _thrust_torque[0] = _tmp23 * _tmp6 + _tmp26 * _tmp33 + _tmp39 * _tmp41
    _thrust_torque[1] = -268 * math.tanh((1.0 / 268.0) * _tmp73 * _tmp75 - 1.0 / 268.0 * _tmp78)
    _thrust_torque[2] = -268 * math.tanh(
        (1.0 / 268.0) * _tmp72 * _tmp75 * _tmp81 - 1.0 / 268.0 * _tmp83
    )
    _thrust_torque[3] = -56 * math.tanh(
        (1.0 / 56.0) * _tmp75 * _tmp85 * _tmp87 - 1.0 / 56.0 * _tmp90
    )
    _jacobian = numpy.zeros((4, 25))
    _jacobian[0, 0] = -_tmp23 * _tmp4
    _jacobian[1, 0] = _tmp135 * (
        _tmp114 * _tmp122
        - _tmp114 * _tmp125
        - _tmp133
        * (
            -_tmp100 * _tmp131
            - _tmp102 * _tmp57
            - _tmp110 * _tmp21
            + _tmp113 * _tmp57
            + _tmp129 * _tmp130
        )
    )
    _jacobian[2, 0] = _tmp144 * (
        -_tmp114 * _tmp141
        + _tmp114 * _tmp142
        - _tmp133
        * (
            _tmp101 * _tmp129
            + _tmp102 * _tmp21
            - _tmp110 * _tmp57
            - _tmp138 * _tmp4
            + _tmp139 * _tmp91
        )
    )
    _jacobian[3, 0] = _tmp150 * (
        -_tmp114 * _tmp146
        + _tmp114 * _tmp147
        - _tmp148
        * (
            _tmp100 * _tmp130
            + _tmp102 * _tmp40
            + _tmp110 * _tmp20
            - _tmp113 * _tmp40
            + _tmp129 * _tmp131
        )
    )
    _jacobian[0, 1] = -_tmp151
    _jacobian[1, 1] = _tmp135 * (
        _tmp121 * _tmp160
        - _tmp125 * _tmp158
        - _tmp133 * (-_tmp105 * _tmp57 + _tmp109 * _tmp57 + _tmp130 * _tmp159 - _tmp156 * _tmp21)
    )
    _jacobian[2, 1] = _tmp144 * (
        -_tmp133 * (_tmp101 * _tmp159 - _tmp109 * _tmp21 - _tmp156 * _tmp57 + _tmp162 * _tmp91)
        + _tmp140 * _tmp160
        - _tmp141 * _tmp158
    )
    _jacobian[3, 1] = _tmp150 * (
        _tmp145 * _tmp160
        - _tmp146 * _tmp158
        - _tmp148 * (_tmp105 * _tmp40 - _tmp109 * _tmp40 + _tmp156 * _tmp20 + _tmp163 * _tmp91)
    )
    _jacobian[0, 2] = -_tmp26 * _tmp31
    _jacobian[1, 2] = _tmp135 * (
        _tmp122 * _tmp182
        - _tmp125 * _tmp182
        - _tmp133 * (_tmp169 * _tmp185 - _tmp172 * _tmp21 - _tmp181 * _tmp57 + _tmp186 * _tmp31)
    )
    _jacobian[2, 2] = _tmp144 * (
        -_tmp133 * (_tmp169 * _tmp188 + _tmp169 * _tmp189 - _tmp172 * _tmp57 - _tmp187 * _tmp31)
        - _tmp141 * _tmp182
        + _tmp142 * _tmp182
    )
    _jacobian[3, 2] = _tmp150 * (
        -_tmp146 * _tmp182
        + _tmp147 * _tmp182
        - _tmp148 * (_tmp169 * _tmp191 + _tmp172 * _tmp20 + _tmp181 * _tmp40 - _tmp190 * _tmp31)
    )
    _jacobian[0, 3] = -_tmp0 * _tmp23
    _jacobian[1, 3] = _tmp135 * (
        _tmp122 * _tmp200
        - _tmp125 * _tmp200
        - _tmp133
        * (
            _tmp192 * _tmp57
            - _tmp194 * _tmp57
            - _tmp195 * _tmp57
            - _tmp199 * _tmp21
            + _tmp201 * _tmp40
        )
    )
    _jacobian[2, 3] = _tmp144 * (
        -_tmp133
        * (
            -_tmp0 * _tmp138
            + _tmp139 * _tmp193
            + _tmp194 * _tmp21
            - _tmp199 * _tmp57
            + _tmp20 * _tmp201
        )
        - _tmp141 * _tmp200
        + _tmp142 * _tmp200
    )
    _jacobian[3, 3] = _tmp150 * (
        -_tmp146 * _tmp200
        + _tmp147 * _tmp200
        - _tmp148
        * (
            _tmp100 * _tmp202
            - _tmp192 * _tmp40
            + _tmp194 * _tmp40
            + _tmp199 * _tmp20
            + _tmp201 * _tmp57
        )
    )
    _jacobian[0, 4] = -_tmp203
    _jacobian[1, 4] = _tmp135 * (
        _tmp122 * _tmp205
        - _tmp125 * _tmp205
        - _tmp133 * (_tmp159 * _tmp202 + _tmp196 * _tmp57 - _tmp198 * _tmp57 - _tmp204 * _tmp21)
    )
    _jacobian[2, 4] = _tmp144 * (
        -_tmp133 * (_tmp162 * _tmp193 + _tmp193 * _tmp206 - _tmp196 * _tmp21 - _tmp204 * _tmp57)
        - _tmp141 * _tmp205
        + _tmp142 * _tmp205
    )
    _jacobian[3, 4] = _tmp150 * (
        -_tmp146 * _tmp205
        + _tmp147 * _tmp205
        - _tmp148 * (_tmp163 * _tmp193 - _tmp196 * _tmp40 + _tmp198 * _tmp40 + _tmp20 * _tmp204)
    )
    _jacobian[0, 5] = -_tmp26 * _tmp27
    _jacobian[1, 5] = _tmp135 * (
        _tmp122 * _tmp212
        - _tmp125 * _tmp212
        - _tmp133 * (_tmp185 * _tmp207 + _tmp186 * _tmp27 - _tmp209 * _tmp21 - _tmp213 * _tmp57)
    )
    _jacobian[2, 5] = _tmp144 * (
        -_tmp133 * (-_tmp187 * _tmp27 + _tmp188 * _tmp207 + _tmp208 * _tmp214 - _tmp209 * _tmp57)
        - _tmp141 * _tmp212
        + _tmp142 * _tmp212
    )
    _jacobian[3, 5] = _tmp150 * (
        -_tmp146 * _tmp212
        + _tmp147 * _tmp212
        - _tmp148 * (-_tmp190 * _tmp27 + _tmp191 * _tmp207 + _tmp20 * _tmp209 + _tmp213 * _tmp40)
    )
    _jacobian[0, 6] = -_tmp2 * _tmp23
    _jacobian[1, 6] = _tmp135 * (
        _tmp122 * _tmp223
        - _tmp125 * _tmp223
        - _tmp133
        * (
            -_tmp100 * _tmp224
            + _tmp129 * _tmp225
            - _tmp21 * _tmp221
            - _tmp215 * _tmp57
            + _tmp222 * _tmp57
        )
    )
    _jacobian[2, 6] = _tmp144 * (
        -_tmp133
        * (
            _tmp129 * _tmp217
            - _tmp137 * _tmp219
            + _tmp139 * _tmp216
            + _tmp21 * _tmp215
            - _tmp221 * _tmp57
        )
        - _tmp141 * _tmp223
        + _tmp142 * _tmp223
    )
    _jacobian[3, 6] = _tmp150 * (
        -_tmp146 * _tmp223
        + _tmp147 * _tmp223
        - _tmp148
        * (
            _tmp100 * _tmp225
            + _tmp129 * _tmp224
            + _tmp20 * _tmp221
            + _tmp215 * _tmp40
            - _tmp222 * _tmp40
        )
    )
    _jacobian[0, 7] = -_tmp226
    _jacobian[1, 7] = _tmp135 * (
        _tmp122 * _tmp228
        - _tmp125 * _tmp228
        - _tmp133 * (_tmp159 * _tmp225 - _tmp21 * _tmp227 - _tmp218 * _tmp57 + _tmp220 * _tmp57)
    )
    _jacobian[2, 7] = _tmp144 * (
        -_tmp133 * (_tmp162 * _tmp216 + _tmp206 * _tmp216 - _tmp21 * _tmp220 - _tmp227 * _tmp57)
        - _tmp141 * _tmp228
        + _tmp142 * _tmp228
    )
    _jacobian[3, 7] = _tmp150 * (
        -_tmp146 * _tmp228
        + _tmp147 * _tmp228
        - _tmp148 * (_tmp159 * _tmp224 + _tmp20 * _tmp227 + _tmp218 * _tmp40 - _tmp220 * _tmp40)
    )
    _jacobian[0, 8] = -_tmp26 * _tmp29
    _jacobian[1, 8] = _tmp135 * (
        _tmp122 * _tmp237
        - _tmp125 * _tmp237
        - _tmp133 * (_tmp185 * _tmp231 - _tmp21 * _tmp232 + _tmp230 * _tmp233 - _tmp231 * _tmp234)
    )
    _jacobian[2, 8] = _tmp144 * (
        -_tmp133 * (-_tmp161 * _tmp230 + _tmp188 * _tmp231 + _tmp189 * _tmp231 - _tmp232 * _tmp57)
        - _tmp141 * _tmp237
        + _tmp142 * _tmp237
    )
    _jacobian[3, 8] = _tmp150 * (
        -_tmp146 * _tmp237
        + _tmp147 * _tmp237
        - _tmp148 * (_tmp191 * _tmp231 + _tmp20 * _tmp232 + _tmp231 * _tmp238 - _tmp235 * _tmp40)
    )
    _jacobian[0, 9] = (
        _tmp33
        * (
            -_tmp242 * _tmp250
            + _tmp245 * _tmp250
            + _tmp249 * logR[0, 0]
            - _tmp251 * logR[0, 0]
            - _tmp252 * logR[0, 0]
        )
        + _tmp39 * (-_tmp239 * _tmp7 - _tmp240 + _tmp243 + _tmp248 + _tmp25)
        + _tmp6 * (_tmp18 - _tmp247 + _tmp253 + _tmp254 - _tmp255 - _tmp256)
    )
    _jacobian[1, 9] = _tmp135 * (
        _tmp122 * _tmp272
        - _tmp125 * _tmp272
        - _tmp133
        * (_tmp260 - _tmp261 * _tmp7 + _tmp262 + _tmp263 * _tmp264 - _tmp266 + (1.0 / 2.0) * _tmp66)
    )
    _jacobian[2, 9] = _tmp144 * (
        -_tmp133 * (-_tmp274 + _tmp275 + _tmp276 * _tmp40 + _tmp278)
        - _tmp141 * _tmp272
        + _tmp142 * _tmp272
    )
    _jacobian[3, 9] = _tmp150 * (
        -_tmp146 * _tmp272
        + _tmp147 * _tmp272
        - _tmp148 * (-_tmp258 * _tmp263 + _tmp265 * _tmp7 - _tmp279 + _tmp280 + _tmp281)
    )
    _jacobian[0, 10] = (
        _tmp33
        * (
            -_tmp242 * _tmp285
            - _tmp243 * logR[1, 0]
            + _tmp245 * _tmp285
            - _tmp251 * logR[1, 0]
            + _tmp284 * _tmp7
        )
        + _tmp39 * (_tmp18 + _tmp247 - _tmp254 + _tmp255 - _tmp282 + _tmp283)
        + _tmp6 * (_tmp239 * _tmp9 - _tmp24 + _tmp240 + _tmp248 - _tmp252)
    )
    _jacobian[1, 10] = _tmp135 * (
        _tmp122 * _tmp286 - _tmp125 * _tmp286 - _tmp133 * (_tmp278 + _tmp288 + (1.0 / 2.0) * _tmp84)
    )
    _jacobian[2, 10] = _tmp144 * (
        -_tmp133
        * (_tmp20 * _tmp276 - _tmp261 * _tmp9 + _tmp262 + _tmp277 * _tmp9 + _tmp289 - _tmp290)
        - _tmp141 * _tmp286
        + _tmp142 * _tmp286
    )
    _jacobian[3, 10] = _tmp150 * (
        -_tmp146 * _tmp286
        + _tmp147 * _tmp286
        - _tmp148 * (-_tmp267 + _tmp270 - _tmp271 * _tmp9 + _tmp273 * _tmp9 + _tmp291 + _tmp65)
    )
    _jacobian[0, 11] = (
        _tmp33 * (-_tmp253 + _tmp256 + _tmp282 - _tmp283)
        + _tmp39
        * (
            _tmp16 * _tmp257
            + _tmp17 * logR[1, 0]
            - _tmp239 * _tmp257
            + _tmp242 * _tmp257
            + _tmp242 * _tmp8 * logR[1, 0]
            - _tmp284 * _tmp8
        )
        + _tmp6
        * (
            -_tmp16 * _tmp287
            + _tmp17 * logR[0, 0]
            + _tmp239 * _tmp287
            - _tmp242 * _tmp287
            + _tmp242 * _tmp292
            - _tmp245 * _tmp292
        )
    )
    _jacobian[1, 11] = _tmp135 * (
        _tmp122 * _tmp294
        - _tmp125 * _tmp294
        - _tmp133 * (_tmp258 * _tmp293 - _tmp265 * _tmp8 + _tmp279 + _tmp281 + (1.0 / 2.0) * _tmp80)
    )
    _jacobian[2, 11] = _tmp144 * (
        -_tmp133 * (_tmp271 * _tmp8 - _tmp273 * _tmp8 + _tmp276 * _tmp57 + _tmp291 - _tmp65)
        - _tmp141 * _tmp294
        + _tmp142 * _tmp294
    )
    _jacobian[3, 11] = _tmp150 * (
        -_tmp146 * _tmp294
        + _tmp147 * _tmp294
        - _tmp148
        * (-_tmp260 - _tmp261 * _tmp8 + _tmp262 + _tmp264 * _tmp293 + _tmp266 - _tmp289 + _tmp290)
    )
    _jacobian[0, 12] = 0
    _jacobian[1, 12] = -_tmp295
    _jacobian[2, 12] = 0
    _jacobian[3, 12] = 0
    _jacobian[0, 13] = 0
    _jacobian[1, 13] = 0
    _jacobian[2, 13] = -_tmp296
    _jacobian[3, 13] = 0
    _jacobian[0, 14] = 0
    _jacobian[1, 14] = 0
    _jacobian[2, 14] = 0
    _jacobian[3, 14] = -_tmp297
    _jacobian[0, 15] = -_tmp151 * ierr[1, 0] - _tmp23 * _tmp5
    _jacobian[1, 15] = _tmp135 * (
        _tmp122 * _tmp311
        - _tmp125 * _tmp311
        - _tmp133
        * (
            -_tmp185 * _tmp314
            - _tmp21 * _tmp304
            + _tmp300 * _tmp313
            - _tmp310 * _tmp57
            - _tmp315 * _tmp5
        )
    )
    _jacobian[2, 15] = _tmp144 * (
        -_tmp133
        * (
            -_tmp188 * _tmp314
            - _tmp300 * _tmp316
            - _tmp304 * _tmp57
            + _tmp308 * _tmp95
            + _tmp5 * _tmp79
        )
        - _tmp141 * _tmp311
        + _tmp142 * _tmp311
    )
    _jacobian[3, 15] = _tmp150 * (
        -_tmp146 * _tmp311
        + _tmp147 * _tmp311
        - _tmp148
        * (
            -_tmp191 * _tmp314
            + _tmp20 * _tmp304
            - _tmp300 * _tmp318
            + _tmp307 * _tmp40
            + _tmp310 * _tmp40
        )
    )
    _jacobian[0, 16] = -_tmp26 * _tmp32
    _jacobian[1, 16] = _tmp135 * (
        _tmp122 * _tmp321
        - _tmp125 * _tmp321
        - _tmp133 * (_tmp185 * _tmp319 + _tmp186 * _tmp32 - _tmp21 * _tmp320 - _tmp234 * _tmp319)
    )
    _jacobian[2, 16] = _tmp144 * (
        -_tmp133 * (-_tmp187 * _tmp32 + _tmp188 * _tmp319 + _tmp189 * _tmp319 - _tmp320 * _tmp57)
        - _tmp141 * _tmp321
        + _tmp142 * _tmp321
    )
    _jacobian[3, 16] = _tmp150 * (
        -_tmp146 * _tmp321
        + _tmp147 * _tmp321
        - _tmp148 * (-_tmp190 * _tmp32 + _tmp191 * _tmp319 + _tmp20 * _tmp320 + _tmp238 * _tmp319)
    )
    _jacobian[0, 17] = -_tmp1 * _tmp23 - _tmp203 * _tmp34
    _jacobian[1, 17] = _tmp135 * (
        _tmp122 * _tmp328
        - _tmp125 * _tmp328
        - _tmp133
        * (
            -_tmp1 * _tmp315
            - _tmp185 * _tmp326
            - _tmp21 * _tmp323
            + _tmp313 * _tmp322
            - _tmp325 * _tmp57
        )
    )
    _jacobian[2, 17] = _tmp144 * (
        -_tmp133
        * (
            _tmp1 * _tmp79
            - _tmp188 * _tmp326
            - _tmp316 * _tmp322
            - _tmp323 * _tmp57
            + _tmp324 * _tmp95
        )
        - _tmp141 * _tmp328
        + _tmp142 * _tmp328
    )
    _jacobian[3, 17] = _tmp150 * (
        -_tmp146 * _tmp328
        + _tmp147 * _tmp328
        - _tmp148
        * (
            -_tmp191 * _tmp326
            + _tmp20 * _tmp323
            - _tmp318 * _tmp322
            + _tmp325 * _tmp40
            + _tmp327 * _tmp40
        )
    )
    _jacobian[0, 18] = -_tmp26 * _tmp28
    _jacobian[1, 18] = _tmp135 * (
        _tmp122 * _tmp333
        - _tmp125 * _tmp333
        - _tmp133 * (_tmp185 * _tmp329 + _tmp186 * _tmp28 - _tmp21 * _tmp332 - _tmp331 * _tmp57)
    )
    _jacobian[2, 18] = _tmp144 * (
        -_tmp133 * (-_tmp187 * _tmp28 + _tmp188 * _tmp329 + _tmp330 * _tmp93 - _tmp332 * _tmp57)
        - _tmp141 * _tmp333
        + _tmp142 * _tmp333
    )
    _jacobian[3, 18] = _tmp150 * (
        -_tmp146 * _tmp333
        + _tmp147 * _tmp333
        - _tmp148 * (-_tmp190 * _tmp28 + _tmp191 * _tmp329 + _tmp20 * _tmp332 + _tmp331 * _tmp40)
    )
    _jacobian[0, 19] = -_tmp226 * _tmp36 - _tmp23 * _tmp3
    _jacobian[1, 19] = _tmp135 * (
        _tmp121 * _tmp342
        - _tmp125 * _tmp341
        - _tmp133
        * (
            -_tmp185 * _tmp343
            - _tmp21 * _tmp337
            + _tmp233 * _tmp344
            - _tmp3 * _tmp315
            - _tmp340 * _tmp57
        )
    )
    _jacobian[2, 19] = _tmp144 * (
        -_tmp133
        * (
            -_tmp188 * _tmp343
            + _tmp3 * _tmp79
            - _tmp336 * _tmp94
            - _tmp338 * logR[2, 0]
            + _tmp339 * _tmp95
        )
        + _tmp140 * _tmp342
        - _tmp141 * _tmp341
    )
    _jacobian[3, 19] = _tmp150 * (
        _tmp145 * _tmp342
        - _tmp146 * _tmp341
        - _tmp148
        * (
            -_tmp191 * _tmp343
            + _tmp20 * _tmp337
            - _tmp317 * _tmp344
            + _tmp334 * _tmp40
            + _tmp340 * _tmp40
        )
    )
    _jacobian[0, 20] = -_tmp26 * _tmp30
    _jacobian[1, 20] = _tmp135 * (
        _tmp122 * _tmp348
        - _tmp125 * _tmp348
        - _tmp133 * (_tmp185 * _tmp345 + _tmp186 * _tmp30 - _tmp21 * _tmp346 - _tmp347 * _tmp57)
    )
    _jacobian[2, 20] = _tmp144 * (
        -_tmp133 * (-_tmp187 * _tmp30 + _tmp188 * _tmp345 + _tmp189 * _tmp345 - _tmp346 * _tmp57)
        - _tmp141 * _tmp348
        + _tmp142 * _tmp348
    )
    _jacobian[3, 20] = _tmp150 * (
        -_tmp146 * _tmp348
        + _tmp147 * _tmp348
        - _tmp148 * (-_tmp190 * _tmp30 + _tmp191 * _tmp345 + _tmp20 * _tmp346 + _tmp347 * _tmp40)
    )
    _jacobian[0, 21] = 0
    _jacobian[1, 21] = -_tmp134 * _tmp135
    _jacobian[2, 21] = -_tmp143 * _tmp144
    _jacobian[3, 21] = 0
    _jacobian[0, 22] = 0
    _jacobian[1, 22] = 0
    _jacobian[2, 22] = 0
    _jacobian[3, 22] = -_tmp149 * _tmp150
    _jacobian[0, 23] = 0
    _jacobian[1, 23] = -_tmp295 * _tmp77
    _jacobian[2, 23] = -_tmp296 * _tmp82
    _jacobian[3, 23] = 0
    _jacobian[0, 24] = 0
    _jacobian[1, 24] = 0
    _jacobian[2, 24] = 0
    _jacobian[3, 24] = -_tmp297 * _tmp89
    return _thrust_torque, _jacobian
