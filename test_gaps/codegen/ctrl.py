# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def ctrl(ierr, p, v, logR, w, p_d, v_d, a_d, w_d, theta_pos, theta_rot, dt):
    # type: (numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, float) -> T.Tuple[numpy.ndarray, numpy.ndarray]
    """
    This function was autogenerated from a symbolic function. Do not modify by hand.

    Symbolic function: ctrl_symfn

    Args:
        ierr: Matrix31
        p: Matrix31
        v: Matrix31
        logR: Matrix31
        w: Matrix31
        p_d: Matrix31
        v_d: Matrix31
        a_d: Matrix31
        w_d: Matrix31
        theta_pos: Matrix61
        theta_rot: Matrix41
        dt: Scalar

    Outputs:
        thrust_torque: Matrix41
        jacobian: (4x25) jacobian of thrust_torque wrt args ierr (3), p (3), v (3), logR (3), w (3),
                  theta_pos (6), theta_rot (4)
    """

    # Total ops: 1503

    # Input arrays
    if ierr.shape == (3,):
        ierr = ierr.reshape((3, 1))
    elif ierr.shape != (3, 1):
        raise IndexError(
            "ierr is expected to have shape (3, 1) or (3,); instead had shape {}".format(ierr.shape)
        )

    if p.shape == (3,):
        p = p.reshape((3, 1))
    elif p.shape != (3, 1):
        raise IndexError(
            "p is expected to have shape (3, 1) or (3,); instead had shape {}".format(p.shape)
        )

    if v.shape == (3,):
        v = v.reshape((3, 1))
    elif v.shape != (3, 1):
        raise IndexError(
            "v is expected to have shape (3, 1) or (3,); instead had shape {}".format(v.shape)
        )

    if logR.shape == (3,):
        logR = logR.reshape((3, 1))
    elif logR.shape != (3, 1):
        raise IndexError(
            "logR is expected to have shape (3, 1) or (3,); instead had shape {}".format(logR.shape)
        )

    if w.shape == (3,):
        w = w.reshape((3, 1))
    elif w.shape != (3, 1):
        raise IndexError(
            "w is expected to have shape (3, 1) or (3,); instead had shape {}".format(w.shape)
        )

    if p_d.shape == (3,):
        p_d = p_d.reshape((3, 1))
    elif p_d.shape != (3, 1):
        raise IndexError(
            "p_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(p_d.shape)
        )

    if v_d.shape == (3,):
        v_d = v_d.reshape((3, 1))
    elif v_d.shape != (3, 1):
        raise IndexError(
            "v_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(v_d.shape)
        )

    if a_d.shape == (3,):
        a_d = a_d.reshape((3, 1))
    elif a_d.shape != (3, 1):
        raise IndexError(
            "a_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(a_d.shape)
        )

    if w_d.shape == (3,):
        w_d = w_d.reshape((3, 1))
    elif w_d.shape != (3, 1):
        raise IndexError(
            "w_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(w_d.shape)
        )

    if theta_pos.shape == (6,):
        theta_pos = theta_pos.reshape((6, 1))
    elif theta_pos.shape != (6, 1):
        raise IndexError(
            "theta_pos is expected to have shape (6, 1) or (6,); instead had shape {}".format(
                theta_pos.shape
            )
        )

    if theta_rot.shape == (4,):
        theta_rot = theta_rot.reshape((4, 1))
    elif theta_rot.shape != (4, 1):
        raise IndexError(
            "theta_rot is expected to have shape (4, 1) or (4,); instead had shape {}".format(
                theta_rot.shape
            )
        )

    # Intermediate terms (332)
    _tmp0 = (
        a_d[1, 0]
        - ierr[1, 0] * theta_pos[0, 0]
        - theta_pos[2, 0] * (p[1, 0] - p_d[1, 0])
        - theta_pos[4, 0] * (v[1, 0] - v_d[1, 0])
    )
    _tmp1 = logR[0, 0] ** 2
    _tmp2 = logR[2, 0] ** 2
    _tmp3 = logR[1, 0] ** 2
    _tmp4 = _tmp1 + _tmp2 + _tmp3 + 1.0e-12
    _tmp5 = math.sqrt(_tmp4)
    _tmp6 = (1.0 / 2.0) * _tmp5
    _tmp7 = math.sin(_tmp6)
    _tmp8 = _tmp7**2
    _tmp9 = 1 / _tmp4
    _tmp10 = _tmp9 * logR[1, 0]
    _tmp11 = _tmp10 * logR[2, 0]
    _tmp12 = _tmp11 * _tmp8
    _tmp13 = _tmp7 / _tmp5
    _tmp14 = _tmp13 * logR[0, 0]
    _tmp15 = math.cos(_tmp6)
    _tmp16 = 2 * _tmp15
    _tmp17 = 2 * _tmp12 - _tmp14 * _tmp16
    _tmp18 = (
        a_d[0, 0]
        - ierr[0, 0] * theta_pos[0, 0]
        - theta_pos[2, 0] * (p[0, 0] - p_d[0, 0])
        - theta_pos[4, 0] * (v[0, 0] - v_d[0, 0])
    )
    _tmp19 = _tmp8 * logR[2, 0]
    _tmp20 = _tmp9 * logR[0, 0]
    _tmp21 = _tmp19 * _tmp20
    _tmp22 = _tmp13 * _tmp16
    _tmp23 = 2 * _tmp21 + _tmp22 * logR[1, 0]
    _tmp24 = _tmp3 * _tmp9
    _tmp25 = _tmp24 * _tmp8
    _tmp26 = _tmp1 * _tmp9
    _tmp27 = _tmp26 * _tmp8
    _tmp28 = -2 * _tmp25 - 2 * _tmp27 + 1
    _tmp29 = (
        a_d[2, 0]
        - ierr[2, 0] * theta_pos[1, 0]
        - theta_pos[3, 0] * (p[2, 0] - p_d[2, 0])
        - theta_pos[5, 0] * (v[2, 0] - v_d[2, 0])
        + 9.81
    )
    _tmp30 = -theta_rot[2, 0] * (w[0, 0] - w_d[0, 0])
    _tmp31 = _tmp13 * logR[2, 0]
    _tmp32 = _tmp29**2
    _tmp33 = _tmp0**2
    _tmp34 = _tmp18**2
    _tmp35 = _tmp32 + _tmp33 + _tmp34 + 1.0e-6
    _tmp36 = 1 / math.sqrt(_tmp35)
    _tmp37 = _tmp29 * _tmp36
    _tmp38 = 2 * _tmp37 + 2.000001
    _tmp39 = math.sqrt(_tmp38)
    _tmp40 = 1 / _tmp39
    _tmp41 = (
        0.0 if abs(_tmp37 + 1) - 1.0e-6 == 0 else math.copysign(1, abs(_tmp37 + 1) - 1.0e-6)
    ) + 1
    _tmp42 = (1.0 / 2.0) * _tmp41
    _tmp43 = _tmp40 * _tmp42
    _tmp44 = _tmp36 * _tmp43
    _tmp45 = _tmp18 * _tmp44
    _tmp46 = (1.0 / 4.0) * _tmp39
    _tmp47 = _tmp41 * _tmp46
    _tmp48 = _tmp0 * _tmp36
    _tmp49 = -_tmp42 - _tmp43 * _tmp48 + 1
    _tmp50 = _tmp15 * _tmp49
    _tmp51 = _tmp14 * _tmp47 + _tmp31 * _tmp45 - _tmp50
    _tmp52 = _tmp13 * _tmp49
    _tmp53 = _tmp52 * logR[0, 0]
    _tmp54 = _tmp13 * logR[1, 0]
    _tmp55 = _tmp45 * _tmp54
    _tmp56 = -_tmp53 - _tmp55
    _tmp57 = _tmp15 * _tmp41
    _tmp58 = _tmp46 * _tmp57
    _tmp59 = 2 * min(0, (0.0 if -_tmp56 + _tmp58 == 0 else math.copysign(1, -_tmp56 + _tmp58))) + 1
    _tmp60 = 2 * _tmp59
    _tmp61 = _tmp60 * theta_rot[0, 0]
    _tmp62 = min(0.999999, abs(_tmp56 - _tmp58))
    _tmp63 = math.acos(_tmp62) / math.sqrt(1 - _tmp62**2)
    _tmp64 = _tmp61 * _tmp63
    _tmp65 = -theta_rot[2, 0] * (w[1, 0] - w_d[1, 0])
    _tmp66 = _tmp15 * _tmp44
    _tmp67 = _tmp52 * logR[2, 0]
    _tmp68 = -_tmp18 * _tmp66 + _tmp47 * _tmp54 - _tmp67
    _tmp69 = -theta_rot[3, 0] * (w[2, 0] - w_d[2, 0])
    _tmp70 = _tmp52 * logR[1, 0]
    _tmp71 = -_tmp14 * _tmp45 + _tmp31 * _tmp47 + _tmp70
    _tmp72 = _tmp71 * theta_rot[1, 0]
    _tmp73 = _tmp35 ** (-3.0 / 2.0)
    _tmp74 = _tmp43 * _tmp73
    _tmp75 = _tmp34 * _tmp74
    _tmp76 = _tmp31 * _tmp75
    _tmp77 = _tmp31 * theta_pos[0, 0]
    _tmp78 = _tmp38 ** (-3.0 / 2.0)
    _tmp79 = _tmp29 / _tmp35**2
    _tmp80 = _tmp42 * _tmp79
    _tmp81 = _tmp78 * _tmp80
    _tmp82 = _tmp34 * _tmp81
    _tmp83 = _tmp44 * theta_pos[0, 0]
    _tmp84 = _tmp18 * _tmp29
    _tmp85 = (1.0 / 4.0) * _tmp41
    _tmp86 = _tmp40 * _tmp73
    _tmp87 = _tmp85 * _tmp86
    _tmp88 = _tmp14 * _tmp87
    _tmp89 = _tmp84 * _tmp88
    _tmp90 = _tmp18 * _tmp78
    _tmp91 = _tmp0 * _tmp80 * _tmp90
    _tmp92 = _tmp91 * theta_pos[0, 0]
    _tmp93 = _tmp0 * _tmp74
    _tmp94 = _tmp18 * _tmp93
    _tmp95 = _tmp94 * theta_pos[0, 0]
    _tmp96 = _tmp92 - _tmp95
    _tmp97 = _tmp53 + _tmp55 + _tmp58
    _tmp98 = abs(_tmp97)
    _tmp99 = min(0.999999, _tmp98)
    _tmp100 = 1 - _tmp99**2
    _tmp101 = math.acos(_tmp99)
    _tmp102 = _tmp101 / math.sqrt(_tmp100)
    _tmp103 = _tmp102 * _tmp61
    _tmp104 = _tmp54 * _tmp75
    _tmp105 = _tmp54 * _tmp82
    _tmp106 = _tmp13 * _tmp96
    _tmp107 = (1.0 / 4.0) * _tmp57
    _tmp108 = _tmp107 * _tmp86
    _tmp109 = _tmp108 * _tmp18
    _tmp110 = _tmp109 * _tmp29
    _tmp111 = (
        _tmp104 * theta_pos[0, 0]
        - _tmp105 * theta_pos[0, 0]
        + _tmp106 * logR[0, 0]
        + _tmp110 * theta_pos[0, 0]
        - _tmp54 * _tmp83
    )
    _tmp112 = (
        _tmp59
        * ((0.0 if 0.999999 - _tmp98 == 0 else math.copysign(1, 0.999999 - _tmp98)) + 1)
        * (0.0 if _tmp97 == 0 else math.copysign(1, _tmp97))
    )
    _tmp113 = _tmp112 / _tmp100
    _tmp114 = _tmp113 * theta_rot[0, 0]
    _tmp115 = _tmp114 * _tmp51
    _tmp116 = _tmp101 * _tmp112 * _tmp99 / _tmp100 ** (3.0 / 2.0)
    _tmp117 = _tmp116 * theta_rot[0, 0]
    _tmp118 = _tmp117 * _tmp51
    _tmp119 = 1 - math.tanh((1.0 / 268.0) * _tmp103 * _tmp51 - 1.0 / 268.0 * _tmp30) ** 2
    _tmp120 = 1 - math.tanh((1.0 / 268.0) * _tmp103 * _tmp68 - 1.0 / 268.0 * _tmp65) ** 2
    _tmp121 = _tmp114 * _tmp68
    _tmp122 = _tmp117 * _tmp68
    _tmp123 = _tmp54 * _tmp87
    _tmp124 = _tmp123 * _tmp84
    _tmp125 = _tmp15 * _tmp34
    _tmp126 = _tmp125 * _tmp74
    _tmp127 = _tmp125 * _tmp81
    _tmp128 = _tmp102 * _tmp60
    _tmp129 = _tmp128 * theta_rot[1, 0]
    _tmp130 = 1 - math.tanh((1.0 / 56.0) * _tmp129 * _tmp71 - 1.0 / 56.0 * _tmp69) ** 2
    _tmp131 = _tmp116 * _tmp72
    _tmp132 = _tmp31 * _tmp87
    _tmp133 = _tmp132 * _tmp84
    _tmp134 = _tmp14 * _tmp82
    _tmp135 = _tmp14 * _tmp75
    _tmp136 = _tmp113 * _tmp72
    _tmp137 = _tmp0 * _tmp29
    _tmp138 = _tmp108 * _tmp137
    _tmp139 = _tmp33 * _tmp74
    _tmp140 = _tmp33 * _tmp81
    _tmp141 = -_tmp139 * theta_pos[0, 0] + _tmp140 * theta_pos[0, 0] + _tmp83
    _tmp142 = _tmp138 * theta_pos[0, 0] + _tmp14 * _tmp141 - _tmp54 * _tmp92 + _tmp54 * _tmp95
    _tmp143 = _tmp0 * _tmp87
    _tmp144 = _tmp143 * _tmp29
    _tmp145 = _tmp14 * _tmp144
    _tmp146 = _tmp29 * _tmp54
    _tmp147 = _tmp143 * _tmp146
    _tmp148 = _tmp13 * _tmp141
    _tmp149 = _tmp74 * _tmp84
    _tmp150 = _tmp149 * _tmp31
    _tmp151 = 2 * _tmp36
    _tmp152 = 2 * _tmp32
    _tmp153 = _tmp152 * _tmp73
    _tmp154 = -_tmp151 * theta_pos[1, 0] + _tmp153 * theta_pos[1, 0]
    _tmp155 = _tmp78 * _tmp85
    _tmp156 = _tmp18 * _tmp36
    _tmp157 = _tmp155 * _tmp156
    _tmp158 = _tmp157 * _tmp31
    _tmp159 = (1.0 / 8.0) * _tmp41
    _tmp160 = _tmp159 * _tmp40
    _tmp161 = _tmp14 * _tmp160
    _tmp162 = _tmp155 * _tmp48
    _tmp163 = _tmp29 * _tmp93
    _tmp164 = _tmp154 * _tmp162 - _tmp163 * theta_pos[1, 0]
    _tmp165 = (1.0 / 8.0) * _tmp57
    _tmp166 = _tmp165 * _tmp40
    _tmp167 = _tmp157 * _tmp54
    _tmp168 = _tmp54 * _tmp84
    _tmp169 = _tmp168 * _tmp74
    _tmp170 = _tmp14 * _tmp164 + _tmp154 * _tmp166 - _tmp154 * _tmp167 + _tmp169 * theta_pos[1, 0]
    _tmp171 = _tmp160 * _tmp54
    _tmp172 = _tmp107 * _tmp90
    _tmp173 = _tmp172 * _tmp36
    _tmp174 = _tmp15 * _tmp84
    _tmp175 = _tmp174 * _tmp74
    _tmp176 = _tmp160 * _tmp31
    _tmp177 = _tmp14 * _tmp157
    _tmp178 = _tmp14 * _tmp149
    _tmp179 = _tmp44 * theta_pos[2, 0]
    _tmp180 = _tmp91 * theta_pos[2, 0]
    _tmp181 = _tmp94 * theta_pos[2, 0]
    _tmp182 = _tmp180 - _tmp181
    _tmp183 = (
        _tmp104 * theta_pos[2, 0]
        - _tmp105 * theta_pos[2, 0]
        + _tmp110 * theta_pos[2, 0]
        + _tmp14 * _tmp182
        - _tmp179 * _tmp54
    )
    _tmp184 = _tmp31 * theta_pos[2, 0]
    _tmp185 = _tmp33 * theta_pos[2, 0]
    _tmp186 = _tmp179 - _tmp185 * _tmp74 + _tmp185 * _tmp81
    _tmp187 = _tmp138 * theta_pos[2, 0] + _tmp14 * _tmp186 - _tmp180 * _tmp54 + _tmp181 * _tmp54
    _tmp188 = _tmp13 * _tmp186
    _tmp189 = -_tmp151 * theta_pos[3, 0] + _tmp153 * theta_pos[3, 0]
    _tmp190 = _tmp162 * _tmp189 - _tmp163 * theta_pos[3, 0]
    _tmp191 = _tmp14 * _tmp190 + _tmp166 * _tmp189 - _tmp167 * _tmp189 + _tmp169 * theta_pos[3, 0]
    _tmp192 = _tmp91 * theta_pos[4, 0]
    _tmp193 = _tmp18 * theta_pos[4, 0]
    _tmp194 = _tmp193 * _tmp93
    _tmp195 = _tmp192 - _tmp194
    _tmp196 = _tmp54 * theta_pos[4, 0]
    _tmp197 = _tmp44 * theta_pos[4, 0]
    _tmp198 = _tmp193 * _tmp29
    _tmp199 = (
        _tmp108 * _tmp198
        + _tmp14 * _tmp195
        + _tmp196 * _tmp75
        - _tmp196 * _tmp82
        - _tmp197 * _tmp54
    )
    _tmp200 = _tmp31 * theta_pos[4, 0]
    _tmp201 = -_tmp139 * theta_pos[4, 0] + _tmp140 * theta_pos[4, 0] + _tmp197
    _tmp202 = _tmp138 * theta_pos[4, 0] + _tmp14 * _tmp201 - _tmp192 * _tmp54 + _tmp194 * _tmp54
    _tmp203 = _tmp13 * _tmp201
    _tmp204 = -_tmp151 * theta_pos[5, 0] + _tmp153 * theta_pos[5, 0]
    _tmp205 = _tmp18 * _tmp54
    _tmp206 = _tmp204 * _tmp36
    _tmp207 = _tmp155 * _tmp206
    _tmp208 = _tmp162 * _tmp204 - _tmp163 * theta_pos[5, 0]
    _tmp209 = _tmp14 * _tmp208 + _tmp166 * _tmp204 + _tmp169 * theta_pos[5, 0] - _tmp205 * _tmp207
    _tmp210 = _tmp18 * _tmp31
    _tmp211 = _tmp14 * _tmp18
    _tmp212 = _tmp7 / _tmp4 ** (3.0 / 2.0)
    _tmp213 = _tmp16 * _tmp212
    _tmp214 = _tmp1 * _tmp213
    _tmp215 = _tmp214 * logR[2, 0]
    _tmp216 = _tmp15**2
    _tmp217 = _tmp10 * logR[0, 0]
    _tmp218 = _tmp216 * _tmp217
    _tmp219 = _tmp217 * _tmp8
    _tmp220 = _tmp4 ** (-2)
    _tmp221 = 4 * _tmp19 * _tmp220
    _tmp222 = _tmp1 * _tmp221
    _tmp223 = 2 * _tmp19 * _tmp9
    _tmp224 = logR[0, 0] * logR[1, 0]
    _tmp225 = _tmp213 * _tmp224
    _tmp226 = 4 * _tmp8
    _tmp227 = _tmp220 * _tmp226
    _tmp228 = _tmp227 * logR[0, 0]
    _tmp229 = logR[0, 0] ** 3
    _tmp230 = _tmp213 * _tmp3
    _tmp231 = logR[0, 0] * logR[2, 0]
    _tmp232 = _tmp213 * _tmp231
    _tmp233 = -_tmp221 * _tmp224 + _tmp232 * logR[1, 0]
    _tmp234 = _tmp156 * _tmp40
    _tmp235 = _tmp107 * _tmp234
    _tmp236 = _tmp217 * _tmp235
    _tmp237 = _tmp212 * _tmp45
    _tmp238 = _tmp224 * _tmp237
    _tmp239 = _tmp159 * _tmp39
    _tmp240 = (1.0 / 2.0) * _tmp50
    _tmp241 = _tmp212 * _tmp49
    _tmp242 = -_tmp1 * _tmp241 - _tmp14 * _tmp239 + _tmp236 - _tmp238 + _tmp240 * _tmp26 + _tmp52
    _tmp243 = _tmp231 * _tmp237
    _tmp244 = _tmp212 * _tmp47
    _tmp245 = _tmp20 * logR[2, 0]
    _tmp246 = _tmp235 * _tmp245
    _tmp247 = _tmp13 * _tmp47
    _tmp248 = _tmp165 * _tmp39
    _tmp249 = _tmp234 * _tmp85
    _tmp250 = _tmp231 * _tmp241
    _tmp251 = _tmp240 * _tmp245
    _tmp252 = _tmp217 * _tmp248 - _tmp224 * _tmp244
    _tmp253 = _tmp13 * _tmp45
    _tmp254 = _tmp241 * logR[1, 0]
    _tmp255 = _tmp217 * _tmp240 - _tmp254 * logR[0, 0]
    _tmp256 = -_tmp231 * _tmp244 + _tmp245 * _tmp248
    _tmp257 = _tmp221 * _tmp3
    _tmp258 = _tmp230 * logR[2, 0]
    _tmp259 = _tmp227 * logR[1, 0]
    _tmp260 = logR[1, 0] ** 3
    _tmp261 = _tmp235 * _tmp24 - _tmp237 * _tmp3 - _tmp239 * _tmp54 + _tmp253 + _tmp255
    _tmp262 = logR[1, 0] * logR[2, 0]
    _tmp263 = _tmp11 * _tmp235 - _tmp237 * _tmp262
    _tmp264 = _tmp11 * _tmp240
    _tmp265 = _tmp254 * logR[2, 0]
    _tmp266 = _tmp11 * _tmp248 - _tmp244 * _tmp262
    _tmp267 = 2 * _tmp8
    _tmp268 = _tmp213 * logR[1, 0]
    _tmp269 = _tmp2 * _tmp9
    _tmp270 = -_tmp239 * _tmp31 - _tmp250 + _tmp251 + _tmp263
    _tmp271 = 2 * _tmp0
    _tmp272 = 2 * _tmp18
    _tmp273 = -_tmp271 * ierr[1, 0] - _tmp272 * ierr[0, 0]
    _tmp274 = _tmp18 * _tmp273
    _tmp275 = _tmp155 * _tmp79
    _tmp276 = _tmp275 * _tmp54
    _tmp277 = _tmp166 * _tmp73
    _tmp278 = _tmp277 * _tmp29
    _tmp279 = _tmp44 * ierr[0, 0]
    _tmp280 = _tmp0 * _tmp275
    _tmp281 = _tmp143 * _tmp273 - _tmp273 * _tmp280 + _tmp44 * ierr[1, 0]
    _tmp282 = (
        -_tmp123 * _tmp274
        + _tmp14 * _tmp281
        - _tmp273 * _tmp278
        + _tmp274 * _tmp276
        - _tmp279 * _tmp54
    )
    _tmp283 = _tmp274 * _tmp275
    _tmp284 = _tmp159 * _tmp86
    _tmp285 = _tmp284 * _tmp29
    _tmp286 = _tmp273 * _tmp285
    _tmp287 = _tmp146 * _tmp284
    _tmp288 = _tmp172 * _tmp79
    _tmp289 = _tmp73 * ierr[2, 0]
    _tmp290 = -_tmp151 * ierr[2, 0] + _tmp152 * _tmp289
    _tmp291 = _tmp289 * _tmp43
    _tmp292 = -_tmp137 * _tmp291 + _tmp162 * _tmp290
    _tmp293 = _tmp14 * _tmp292 + _tmp166 * _tmp290 - _tmp167 * _tmp290 + _tmp168 * _tmp291
    _tmp294 = _tmp291 * _tmp84
    _tmp295 = _tmp290 * _tmp31
    _tmp296 = _tmp13 * _tmp292
    _tmp297 = -p[0, 0] + p_d[0, 0]
    _tmp298 = -p[1, 0] + p_d[1, 0]
    _tmp299 = _tmp271 * _tmp298 + _tmp272 * _tmp297
    _tmp300 = _tmp18 * _tmp299
    _tmp301 = _tmp275 * _tmp300
    _tmp302 = _tmp285 * _tmp299
    _tmp303 = _tmp143 * _tmp299 - _tmp280 * _tmp299 - _tmp298 * _tmp44
    _tmp304 = _tmp297 * _tmp44
    _tmp305 = (
        -_tmp123 * _tmp300
        + _tmp14 * _tmp303
        + _tmp276 * _tmp300
        - _tmp278 * _tmp299
        + _tmp304 * _tmp54
    )
    _tmp306 = _tmp13 * _tmp303
    _tmp307 = -p[2, 0] + p_d[2, 0]
    _tmp308 = _tmp151 * _tmp307 - _tmp153 * _tmp307
    _tmp309 = _tmp157 * _tmp308
    _tmp310 = _tmp162 * _tmp308 + _tmp163 * _tmp307
    _tmp311 = _tmp13 * _tmp310
    _tmp312 = _tmp166 * _tmp308 - _tmp169 * _tmp307 - _tmp309 * _tmp54 + _tmp311 * logR[0, 0]
    _tmp313 = _tmp160 * _tmp308
    _tmp314 = -v[0, 0] + v_d[0, 0]
    _tmp315 = -v[1, 0] + v_d[1, 0]
    _tmp316 = _tmp271 * _tmp315 + _tmp272 * _tmp314
    _tmp317 = _tmp316 * _tmp87
    _tmp318 = _tmp314 * _tmp44
    _tmp319 = _tmp275 * _tmp316
    _tmp320 = _tmp0 * _tmp316
    _tmp321 = -_tmp275 * _tmp320 - _tmp315 * _tmp44 + _tmp320 * _tmp87
    _tmp322 = _tmp29 * _tmp316
    _tmp323 = (
        _tmp14 * _tmp321
        - _tmp205 * _tmp317
        + _tmp205 * _tmp319
        - _tmp277 * _tmp322
        + _tmp318 * _tmp54
    )
    _tmp324 = _tmp284 * _tmp322
    _tmp325 = _tmp13 * _tmp321
    _tmp326 = -v[2, 0] + v_d[2, 0]
    _tmp327 = _tmp151 * _tmp326 - _tmp153 * _tmp326
    _tmp328 = _tmp162 * _tmp327 + _tmp163 * _tmp326
    _tmp329 = _tmp13 * _tmp328
    _tmp330 = _tmp166 * _tmp327 - _tmp167 * _tmp327 - _tmp169 * _tmp326 + _tmp329 * logR[0, 0]
    _tmp331 = _tmp160 * _tmp327

    # Output terms
    _thrust_torque = numpy.zeros(4)
    _thrust_torque[0] = _tmp0 * _tmp17 + _tmp18 * _tmp23 + _tmp28 * _tmp29
    _thrust_torque[1] = 268 * math.tanh((1.0 / 268.0) * _tmp30 - 1.0 / 268.0 * _tmp51 * _tmp64)
    _thrust_torque[2] = -268 * math.tanh((1.0 / 268.0) * _tmp64 * _tmp68 - 1.0 / 268.0 * _tmp65)
    _thrust_torque[3] = -56 * math.tanh(
        (1.0 / 56.0) * _tmp60 * _tmp63 * _tmp72 - 1.0 / 56.0 * _tmp69
    )
    _jacobian = numpy.zeros((4, 25))
    _jacobian[0, 0] = -_tmp23 * theta_pos[0, 0]
    _jacobian[1, 0] = _tmp119 * (
        -_tmp103
        * (
            -_tmp15 * _tmp96
            - _tmp31 * _tmp83
            + _tmp76 * theta_pos[0, 0]
            - _tmp77 * _tmp82
            + _tmp89 * theta_pos[0, 0]
        )
        + _tmp111 * _tmp115
        - _tmp111 * _tmp118
    )
    _jacobian[2, 0] = _tmp120 * (
        -_tmp103
        * (
            -_tmp106 * logR[2, 0]
            + _tmp124 * theta_pos[0, 0]
            - _tmp126 * theta_pos[0, 0]
            + _tmp127 * theta_pos[0, 0]
            + _tmp15 * _tmp83
        )
        + _tmp111 * _tmp121
        - _tmp111 * _tmp122
    )
    _jacobian[3, 0] = _tmp130 * (
        -_tmp111 * _tmp131
        + _tmp111 * _tmp136
        - _tmp129
        * (
            _tmp106 * logR[1, 0]
            + _tmp133 * theta_pos[0, 0]
            + _tmp134 * theta_pos[0, 0]
            - _tmp135 * theta_pos[0, 0]
            + _tmp14 * _tmp83
        )
    )
    _jacobian[0, 1] = -_tmp17 * theta_pos[0, 0]
    _jacobian[1, 1] = _tmp119 * (
        -_tmp103
        * (-_tmp141 * _tmp15 + _tmp145 * theta_pos[0, 0] - _tmp31 * _tmp92 + _tmp31 * _tmp95)
        + _tmp115 * _tmp142
        - _tmp118 * _tmp142
    )
    _jacobian[2, 1] = _tmp120 * (
        -_tmp103
        * (_tmp147 * theta_pos[0, 0] - _tmp148 * logR[2, 0] + _tmp15 * _tmp92 - _tmp15 * _tmp95)
        + _tmp121 * _tmp142
        - _tmp122 * _tmp142
    )
    _jacobian[3, 1] = _tmp130 * (
        -_tmp129 * (_tmp14 * _tmp92 - _tmp14 * _tmp95 + _tmp144 * _tmp77 + _tmp148 * logR[1, 0])
        - _tmp131 * _tmp142
        + _tmp136 * _tmp142
    )
    _jacobian[0, 2] = -_tmp28 * theta_pos[1, 0]
    _jacobian[1, 2] = _tmp119 * (
        -_tmp103
        * (-_tmp15 * _tmp164 + _tmp150 * theta_pos[1, 0] - _tmp154 * _tmp158 + _tmp154 * _tmp161)
        + _tmp115 * _tmp170
        - _tmp118 * _tmp170
    )
    _jacobian[2, 2] = _tmp120 * (
        -_tmp103
        * (_tmp154 * _tmp171 + _tmp154 * _tmp173 - _tmp164 * _tmp31 - _tmp175 * theta_pos[1, 0])
        + _tmp121 * _tmp170
        - _tmp122 * _tmp170
    )
    _jacobian[3, 2] = _tmp130 * (
        -_tmp129
        * (_tmp154 * _tmp176 + _tmp154 * _tmp177 + _tmp164 * _tmp54 - _tmp178 * theta_pos[1, 0])
        - _tmp131 * _tmp170
        + _tmp136 * _tmp170
    )
    _jacobian[0, 3] = -_tmp23 * theta_pos[2, 0]
    _jacobian[1, 3] = _tmp119 * (
        -_tmp103
        * (
            -_tmp15 * _tmp182
            - _tmp179 * _tmp31
            - _tmp184 * _tmp82
            + _tmp76 * theta_pos[2, 0]
            + _tmp89 * theta_pos[2, 0]
        )
        + _tmp115 * _tmp183
        - _tmp118 * _tmp183
    )
    _jacobian[2, 3] = _tmp120 * (
        -_tmp103
        * (
            _tmp124 * theta_pos[2, 0]
            - _tmp126 * theta_pos[2, 0]
            + _tmp127 * theta_pos[2, 0]
            + _tmp15 * _tmp179
            - _tmp182 * _tmp31
        )
        + _tmp121 * _tmp183
        - _tmp122 * _tmp183
    )
    _jacobian[3, 3] = _tmp130 * (
        -_tmp129
        * (
            _tmp133 * theta_pos[2, 0]
            + _tmp134 * theta_pos[2, 0]
            - _tmp135 * theta_pos[2, 0]
            + _tmp14 * _tmp179
            + _tmp182 * _tmp54
        )
        - _tmp131 * _tmp183
        + _tmp136 * _tmp183
    )
    _jacobian[0, 4] = -_tmp17 * theta_pos[2, 0]
    _jacobian[1, 4] = _tmp119 * (
        -_tmp103
        * (_tmp145 * theta_pos[2, 0] - _tmp15 * _tmp186 - _tmp180 * _tmp31 + _tmp181 * _tmp31)
        + _tmp115 * _tmp187
        - _tmp118 * _tmp187
    )
    _jacobian[2, 4] = _tmp120 * (
        -_tmp103
        * (_tmp147 * theta_pos[2, 0] + _tmp15 * _tmp180 - _tmp15 * _tmp181 - _tmp188 * logR[2, 0])
        + _tmp121 * _tmp187
        - _tmp122 * _tmp187
    )
    _jacobian[3, 4] = _tmp130 * (
        -_tmp129 * (_tmp14 * _tmp180 - _tmp14 * _tmp181 + _tmp144 * _tmp184 + _tmp188 * logR[1, 0])
        - _tmp131 * _tmp187
        + _tmp136 * _tmp187
    )
    _jacobian[0, 5] = -_tmp28 * theta_pos[3, 0]
    _jacobian[1, 5] = _tmp119 * (
        -_tmp103
        * (-_tmp15 * _tmp190 + _tmp150 * theta_pos[3, 0] - _tmp158 * _tmp189 + _tmp161 * _tmp189)
        + _tmp115 * _tmp191
        - _tmp118 * _tmp191
    )
    _jacobian[2, 5] = _tmp120 * (
        -_tmp103
        * (_tmp171 * _tmp189 + _tmp173 * _tmp189 - _tmp175 * theta_pos[3, 0] - _tmp190 * _tmp31)
        + _tmp121 * _tmp191
        - _tmp122 * _tmp191
    )
    _jacobian[3, 5] = _tmp130 * (
        -_tmp129
        * (_tmp176 * _tmp189 + _tmp177 * _tmp189 - _tmp178 * theta_pos[3, 0] + _tmp190 * _tmp54)
        - _tmp131 * _tmp191
        + _tmp136 * _tmp191
    )
    _jacobian[0, 6] = -_tmp23 * theta_pos[4, 0]
    _jacobian[1, 6] = _tmp119 * (
        -_tmp103
        * (
            -_tmp15 * _tmp195
            - _tmp197 * _tmp31
            + _tmp198 * _tmp88
            - _tmp200 * _tmp82
            + _tmp76 * theta_pos[4, 0]
        )
        + _tmp115 * _tmp199
        - _tmp118 * _tmp199
    )
    _jacobian[2, 6] = _tmp120 * (
        -_tmp103
        * (
            _tmp123 * _tmp198
            - _tmp126 * theta_pos[4, 0]
            + _tmp127 * theta_pos[4, 0]
            + _tmp15 * _tmp197
            - _tmp195 * _tmp31
        )
        + _tmp121 * _tmp199
        - _tmp122 * _tmp199
    )
    _jacobian[3, 6] = _tmp130 * (
        -_tmp129
        * (
            _tmp132 * _tmp198
            + _tmp134 * theta_pos[4, 0]
            - _tmp135 * theta_pos[4, 0]
            + _tmp14 * _tmp197
            + _tmp195 * _tmp54
        )
        - _tmp131 * _tmp199
        + _tmp136 * _tmp199
    )
    _jacobian[0, 7] = -_tmp17 * theta_pos[4, 0]
    _jacobian[1, 7] = _tmp119 * (
        -_tmp103
        * (_tmp145 * theta_pos[4, 0] - _tmp15 * _tmp201 - _tmp192 * _tmp31 + _tmp194 * _tmp31)
        + _tmp115 * _tmp202
        - _tmp118 * _tmp202
    )
    _jacobian[2, 7] = _tmp120 * (
        -_tmp103 * (_tmp144 * _tmp196 + _tmp15 * _tmp192 - _tmp15 * _tmp194 - _tmp203 * logR[2, 0])
        + _tmp121 * _tmp202
        - _tmp122 * _tmp202
    )
    _jacobian[3, 7] = _tmp130 * (
        -_tmp129 * (_tmp14 * _tmp192 - _tmp14 * _tmp194 + _tmp144 * _tmp200 + _tmp203 * logR[1, 0])
        - _tmp131 * _tmp202
        + _tmp136 * _tmp202
    )
    _jacobian[0, 8] = -_tmp28 * theta_pos[5, 0]
    _jacobian[1, 8] = _tmp119 * (
        -_tmp103
        * (-_tmp15 * _tmp208 + _tmp150 * theta_pos[5, 0] + _tmp161 * _tmp204 - _tmp207 * _tmp210)
        + _tmp115 * _tmp209
        - _tmp118 * _tmp209
    )
    _jacobian[2, 8] = _tmp120 * (
        -_tmp103
        * (_tmp171 * _tmp204 + _tmp172 * _tmp206 - _tmp175 * theta_pos[5, 0] - _tmp208 * _tmp31)
        + _tmp121 * _tmp209
        - _tmp122 * _tmp209
    )
    _jacobian[3, 8] = _tmp130 * (
        -_tmp129
        * (_tmp176 * _tmp204 - _tmp178 * theta_pos[5, 0] + _tmp207 * _tmp211 + _tmp208 * _tmp54)
        - _tmp131 * _tmp209
        + _tmp136 * _tmp209
    )
    _jacobian[0, 9] = (
        _tmp0 * (_tmp214 - _tmp216 * _tmp26 - _tmp22 + _tmp233 + _tmp27)
        + _tmp18 * (_tmp215 + _tmp218 - _tmp219 - _tmp222 + _tmp223 - _tmp225)
        + _tmp29
        * (
            -_tmp20 * _tmp226
            - _tmp213 * _tmp229
            + _tmp227 * _tmp229
            + _tmp228 * _tmp3
            - _tmp230 * logR[0, 0]
        )
    )
    _jacobian[1, 9] = _tmp119 * (
        -_tmp103
        * (-_tmp1 * _tmp244 - _tmp243 + _tmp246 + _tmp247 + _tmp248 * _tmp26 + (1.0 / 2.0) * _tmp53)
        + _tmp115 * _tmp242
        - _tmp118 * _tmp242
    )
    _jacobian[2, 9] = _tmp120 * (
        -_tmp103 * (_tmp14 * _tmp249 + _tmp250 - _tmp251 + _tmp252)
        + _tmp121 * _tmp242
        - _tmp122 * _tmp242
    )
    _jacobian[3, 9] = _tmp130 * (
        -_tmp129 * (_tmp1 * _tmp237 - _tmp235 * _tmp26 - _tmp253 + _tmp255 + _tmp256)
        - _tmp131 * _tmp242
        + _tmp136 * _tmp242
    )
    _jacobian[0, 10] = (
        _tmp0 * (-_tmp218 + _tmp219 + _tmp223 + _tmp225 - _tmp257 + _tmp258)
        + _tmp18 * (_tmp216 * _tmp24 + _tmp22 - _tmp230 + _tmp233 - _tmp25)
        + _tmp29
        * (
            _tmp1 * _tmp259
            - _tmp10 * _tmp226
            - _tmp213 * _tmp260
            - _tmp214 * logR[1, 0]
            + _tmp227 * _tmp260
        )
    )
    _jacobian[1, 10] = _tmp119 * (
        -_tmp103 * (_tmp252 + _tmp263 + (1.0 / 2.0) * _tmp70)
        + _tmp115 * _tmp261
        - _tmp118 * _tmp261
    )
    _jacobian[2, 10] = _tmp120 * (
        -_tmp103
        * (_tmp24 * _tmp248 - _tmp244 * _tmp3 + _tmp247 + _tmp249 * _tmp54 - _tmp264 + _tmp265)
        + _tmp121 * _tmp261
        - _tmp122 * _tmp261
    )
    _jacobian[3, 10] = _tmp130 * (
        -_tmp129 * (-_tmp236 + _tmp238 + _tmp24 * _tmp240 - _tmp241 * _tmp3 + _tmp266 + _tmp52)
        - _tmp131 * _tmp261
        + _tmp136 * _tmp261
    )
    _jacobian[0, 11] = (
        _tmp0
        * (
            _tmp10 * _tmp267
            - _tmp2 * _tmp259
            + _tmp2 * _tmp268
            + _tmp21
            - _tmp216 * _tmp245
            + _tmp232
        )
        + _tmp18
        * (
            _tmp11 * _tmp216
            - _tmp12
            + _tmp2 * _tmp213 * logR[0, 0]
            - _tmp2 * _tmp228
            + _tmp20 * _tmp267
            - _tmp268 * logR[2, 0]
        )
        + _tmp29 * (-_tmp215 + _tmp222 + _tmp257 - _tmp258)
    )
    _jacobian[1, 11] = _tmp119 * (
        -_tmp103 * (-_tmp2 * _tmp237 + _tmp235 * _tmp269 + _tmp253 + _tmp256 + (1.0 / 2.0) * _tmp67)
        + _tmp115 * _tmp270
        - _tmp118 * _tmp270
    )
    _jacobian[2, 11] = _tmp120 * (
        -_tmp103 * (_tmp2 * _tmp241 - _tmp240 * _tmp269 + _tmp249 * _tmp31 + _tmp266 - _tmp52)
        + _tmp121 * _tmp270
        - _tmp122 * _tmp270
    )
    _jacobian[3, 11] = _tmp130 * (
        -_tmp129
        * (-_tmp2 * _tmp244 + _tmp243 - _tmp246 + _tmp247 + _tmp248 * _tmp269 + _tmp264 - _tmp265)
        - _tmp131 * _tmp270
        + _tmp136 * _tmp270
    )
    _jacobian[0, 12] = 0
    _jacobian[1, 12] = -_tmp119 * theta_rot[2, 0]
    _jacobian[2, 12] = 0
    _jacobian[3, 12] = 0
    _jacobian[0, 13] = 0
    _jacobian[1, 13] = 0
    _jacobian[2, 13] = -_tmp120 * theta_rot[2, 0]
    _jacobian[3, 13] = 0
    _jacobian[0, 14] = 0
    _jacobian[1, 14] = 0
    _jacobian[2, 14] = 0
    _jacobian[3, 14] = -_tmp130 * theta_rot[3, 0]
    _jacobian[0, 15] = -_tmp17 * ierr[1, 0] - _tmp23 * ierr[0, 0]
    _jacobian[1, 15] = _tmp119 * (
        -_tmp103
        * (
            -_tmp132 * _tmp274
            - _tmp14 * _tmp286
            - _tmp15 * _tmp281
            - _tmp279 * _tmp31
            + _tmp283 * _tmp31
        )
        + _tmp115 * _tmp282
        - _tmp118 * _tmp282
    )
    _jacobian[2, 15] = _tmp120 * (
        -_tmp103
        * (
            _tmp108 * _tmp274
            - _tmp273 * _tmp287
            - _tmp273 * _tmp288
            - _tmp281 * _tmp31
            + _tmp66 * ierr[0, 0]
        )
        + _tmp121 * _tmp282
        - _tmp122 * _tmp282
    )
    _jacobian[3, 15] = _tmp130 * (
        -_tmp129
        * (
            _tmp14 * _tmp279
            - _tmp14 * _tmp283
            + _tmp274 * _tmp88
            + _tmp281 * _tmp54
            - _tmp286 * _tmp31
        )
        - _tmp131 * _tmp282
        + _tmp136 * _tmp282
    )
    _jacobian[0, 16] = -_tmp28 * ierr[2, 0]
    _jacobian[1, 16] = _tmp119 * (
        -_tmp103 * (-_tmp15 * _tmp292 - _tmp157 * _tmp295 + _tmp161 * _tmp290 + _tmp294 * _tmp31)
        + _tmp115 * _tmp293
        - _tmp118 * _tmp293
    )
    _jacobian[2, 16] = _tmp120 * (
        -_tmp103
        * (_tmp171 * _tmp290 + _tmp173 * _tmp290 - _tmp174 * _tmp291 - _tmp296 * logR[2, 0])
        + _tmp121 * _tmp293
        - _tmp122 * _tmp293
    )
    _jacobian[3, 16] = _tmp130 * (
        -_tmp129
        * (-_tmp14 * _tmp294 + _tmp160 * _tmp295 + _tmp177 * _tmp290 + _tmp296 * logR[1, 0])
        - _tmp131 * _tmp293
        + _tmp136 * _tmp293
    )
    _jacobian[0, 17] = _tmp17 * _tmp298 + _tmp23 * _tmp297
    _jacobian[1, 17] = _tmp119 * (
        -_tmp103
        * (
            -_tmp132 * _tmp300
            - _tmp14 * _tmp302
            - _tmp15 * _tmp303
            + _tmp301 * _tmp31
            + _tmp304 * _tmp31
        )
        + _tmp115 * _tmp305
        - _tmp118 * _tmp305
    )
    _jacobian[2, 17] = _tmp120 * (
        -_tmp103
        * (
            _tmp109 * _tmp299
            - _tmp287 * _tmp299
            - _tmp288 * _tmp299
            - _tmp297 * _tmp66
            - _tmp306 * logR[2, 0]
        )
        + _tmp121 * _tmp305
        - _tmp122 * _tmp305
    )
    _jacobian[3, 17] = _tmp130 * (
        -_tmp129
        * (
            -_tmp14 * _tmp301
            - _tmp14 * _tmp304
            + _tmp300 * _tmp88
            - _tmp302 * _tmp31
            + _tmp306 * logR[1, 0]
        )
        - _tmp131 * _tmp305
        + _tmp136 * _tmp305
    )
    _jacobian[0, 18] = _tmp28 * _tmp307
    _jacobian[1, 18] = _tmp119 * (
        -_tmp103 * (-_tmp15 * _tmp310 - _tmp150 * _tmp307 + _tmp161 * _tmp308 - _tmp309 * _tmp31)
        + _tmp115 * _tmp312
        - _tmp118 * _tmp312
    )
    _jacobian[2, 18] = _tmp120 * (
        -_tmp103 * (_tmp173 * _tmp308 + _tmp175 * _tmp307 - _tmp311 * logR[2, 0] + _tmp313 * _tmp54)
        + _tmp121 * _tmp312
        - _tmp122 * _tmp312
    )
    _jacobian[3, 18] = _tmp130 * (
        -_tmp129 * (_tmp177 * _tmp308 + _tmp178 * _tmp307 + _tmp31 * _tmp313 + _tmp311 * logR[1, 0])
        - _tmp131 * _tmp312
        + _tmp136 * _tmp312
    )
    _jacobian[0, 19] = _tmp17 * _tmp315 + _tmp23 * _tmp314
    _jacobian[1, 19] = _tmp119 * (
        -_tmp103
        * (
            -_tmp14 * _tmp324
            - _tmp15 * _tmp321
            - _tmp210 * _tmp317
            + _tmp210 * _tmp319
            + _tmp31 * _tmp318
        )
        + _tmp115 * _tmp323
        - _tmp118 * _tmp323
    )
    _jacobian[2, 19] = _tmp120 * (
        -_tmp103
        * (
            _tmp109 * _tmp316
            - _tmp288 * _tmp316
            - _tmp314 * _tmp66
            - _tmp324 * _tmp54
            - _tmp325 * logR[2, 0]
        )
        + _tmp121 * _tmp323
        - _tmp122 * _tmp323
    )
    _jacobian[3, 19] = _tmp130 * (
        -_tmp129
        * (
            -_tmp14 * _tmp318
            + _tmp18 * _tmp316 * _tmp88
            - _tmp211 * _tmp319
            - _tmp31 * _tmp324
            + _tmp325 * logR[1, 0]
        )
        - _tmp131 * _tmp323
        + _tmp136 * _tmp323
    )
    _jacobian[0, 20] = _tmp28 * _tmp326
    _jacobian[1, 20] = _tmp119 * (
        -_tmp103 * (_tmp14 * _tmp331 - _tmp15 * _tmp328 - _tmp150 * _tmp326 - _tmp158 * _tmp327)
        + _tmp115 * _tmp330
        - _tmp118 * _tmp330
    )
    _jacobian[2, 20] = _tmp120 * (
        -_tmp103 * (_tmp173 * _tmp327 + _tmp175 * _tmp326 - _tmp329 * logR[2, 0] + _tmp331 * _tmp54)
        + _tmp121 * _tmp330
        - _tmp122 * _tmp330
    )
    _jacobian[3, 20] = _tmp130 * (
        -_tmp129 * (_tmp177 * _tmp327 + _tmp178 * _tmp326 + _tmp31 * _tmp331 + _tmp329 * logR[1, 0])
        - _tmp131 * _tmp330
        + _tmp136 * _tmp330
    )
    _jacobian[0, 21] = 0
    _jacobian[1, 21] = -_tmp119 * _tmp128 * _tmp51
    _jacobian[2, 21] = -_tmp120 * _tmp128 * _tmp68
    _jacobian[3, 21] = 0
    _jacobian[0, 22] = 0
    _jacobian[1, 22] = 0
    _jacobian[2, 22] = 0
    _jacobian[3, 22] = -_tmp128 * _tmp130 * _tmp71
    _jacobian[0, 23] = 0
    _jacobian[1, 23] = _tmp119 * (-w[0, 0] + w_d[0, 0])
    _jacobian[2, 23] = _tmp120 * (-w[1, 0] + w_d[1, 0])
    _jacobian[3, 23] = 0
    _jacobian[0, 24] = 0
    _jacobian[1, 24] = 0
    _jacobian[2, 24] = 0
    _jacobian[3, 24] = _tmp130 * (-w[2, 0] + w_d[2, 0])
    return _thrust_torque, _jacobian
