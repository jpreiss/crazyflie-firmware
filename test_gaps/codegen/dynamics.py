# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def dynamics(ierr, p, v, logR, w, p_d, thrust, torque, dt):
    # type: (numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, float, numpy.ndarray, float) -> T.Tuple[numpy.ndarray, numpy.ndarray]
    """
    This function was autogenerated from a symbolic function. Do not modify by hand.

    Symbolic function: dynamics_symfn

    Args:
        ierr: Matrix31
        p: Matrix31
        v: Matrix31
        logR: Matrix31
        w: Matrix31
        p_d: Matrix31
        thrust: Scalar
        torque: Matrix31
        dt: Scalar

    Outputs:
        ierr_p_v_logR_w: Matrix15_1
        jacobian: (15x19) jacobian of ierr_p_v_logR_w wrt args ierr (3), p (3), v (3), logR (3), w (3),
                  thrust (1), torque (3)
    """

    # Total ops: 716

    # Input arrays
    if ierr.shape == (3,):
        ierr = ierr.reshape((3, 1))
    elif ierr.shape != (3, 1):
        raise IndexError(
            "ierr is expected to have shape (3, 1) or (3,); instead had shape {}".format(ierr.shape)
        )

    if p.shape == (3,):
        p = p.reshape((3, 1))
    elif p.shape != (3, 1):
        raise IndexError(
            "p is expected to have shape (3, 1) or (3,); instead had shape {}".format(p.shape)
        )

    if v.shape == (3,):
        v = v.reshape((3, 1))
    elif v.shape != (3, 1):
        raise IndexError(
            "v is expected to have shape (3, 1) or (3,); instead had shape {}".format(v.shape)
        )

    if logR.shape == (3,):
        logR = logR.reshape((3, 1))
    elif logR.shape != (3, 1):
        raise IndexError(
            "logR is expected to have shape (3, 1) or (3,); instead had shape {}".format(logR.shape)
        )

    if w.shape == (3,):
        w = w.reshape((3, 1))
    elif w.shape != (3, 1):
        raise IndexError(
            "w is expected to have shape (3, 1) or (3,); instead had shape {}".format(w.shape)
        )

    if p_d.shape == (3,):
        p_d = p_d.reshape((3, 1))
    elif p_d.shape != (3, 1):
        raise IndexError(
            "p_d is expected to have shape (3, 1) or (3,); instead had shape {}".format(p_d.shape)
        )

    if torque.shape == (3,):
        torque = torque.reshape((3, 1))
    elif torque.shape != (3, 1):
        raise IndexError(
            "torque is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                torque.shape
            )
        )

    # Intermediate terms (240)
    _tmp0 = logR[0, 0] ** 2
    _tmp1 = logR[2, 0] ** 2
    _tmp2 = logR[1, 0] ** 2
    _tmp3 = _tmp0 + _tmp1 + _tmp2 + 1.0e-12
    _tmp4 = 1 / _tmp3
    _tmp5 = _tmp4 * logR[2, 0]
    _tmp6 = math.sqrt(_tmp3)
    _tmp7 = (1.0 / 2.0) * _tmp6
    _tmp8 = math.sin(_tmp7)
    _tmp9 = _tmp8**2
    _tmp10 = 2 * _tmp9
    _tmp11 = _tmp10 * _tmp5
    _tmp12 = 1 / _tmp6
    _tmp13 = _tmp12 * _tmp8
    _tmp14 = math.cos(_tmp7)
    _tmp15 = 2 * _tmp14
    _tmp16 = _tmp13 * _tmp15
    _tmp17 = dt * (_tmp11 * logR[0, 0] + _tmp16 * logR[1, 0])
    _tmp18 = _tmp4 * logR[1, 0]
    _tmp19 = _tmp18 * _tmp9
    _tmp20 = 2 * _tmp19
    _tmp21 = dt * (-_tmp16 * logR[0, 0] + _tmp20 * logR[2, 0])
    _tmp22 = _tmp2 * _tmp4
    _tmp23 = _tmp22 * _tmp9
    _tmp24 = _tmp0 * _tmp4
    _tmp25 = _tmp24 * _tmp9
    _tmp26 = -2 * _tmp23 - 2 * _tmp25 + 1
    _tmp27 = w[2, 0] ** 2
    _tmp28 = dt**2
    _tmp29 = w[1, 0] ** 2
    _tmp30 = w[0, 0] ** 2
    _tmp31 = _tmp27 * _tmp28 + _tmp28 * _tmp29 + _tmp28 * _tmp30 + 1.0e-12
    _tmp32 = math.sqrt(_tmp31)
    _tmp33 = (1.0 / 2.0) * _tmp32
    _tmp34 = math.sin(_tmp33)
    _tmp35 = _tmp14 * _tmp34
    _tmp36 = 1 / _tmp32
    _tmp37 = _tmp36 * dt
    _tmp38 = _tmp35 * _tmp37
    _tmp39 = _tmp38 * w[0, 0]
    _tmp40 = _tmp34 * _tmp37
    _tmp41 = _tmp13 * _tmp40
    _tmp42 = _tmp41 * w[2, 0]
    _tmp43 = _tmp41 * w[1, 0]
    _tmp44 = _tmp43 * logR[2, 0]
    _tmp45 = math.cos(_tmp33)
    _tmp46 = _tmp45 * _tmp8
    _tmp47 = _tmp12 * _tmp46
    _tmp48 = _tmp47 * logR[0, 0]
    _tmp49 = _tmp39 + _tmp42 * logR[1, 0] - _tmp44 + _tmp48
    _tmp50 = _tmp14 * _tmp45
    _tmp51 = _tmp43 * logR[1, 0]
    _tmp52 = _tmp41 * logR[0, 0]
    _tmp53 = _tmp52 * w[0, 0]
    _tmp54 = _tmp42 * logR[2, 0] + _tmp51 + _tmp53
    _tmp55 = _tmp50 - _tmp54
    _tmp56 = abs(_tmp55)
    _tmp57 = min(0.999999, _tmp56)
    _tmp58 = 1 - _tmp57**2
    _tmp59 = math.acos(_tmp57)
    _tmp60 = 0.0 if _tmp55 == 0 else math.copysign(1, _tmp55)
    _tmp61 = 2 * min(0, _tmp60) + 1
    _tmp62 = 2 * _tmp61
    _tmp63 = _tmp59 * _tmp62 / math.sqrt(_tmp58)
    _tmp64 = _tmp38 * w[1, 0]
    _tmp65 = _tmp41 * w[0, 0]
    _tmp66 = _tmp65 * logR[2, 0]
    _tmp67 = _tmp47 * logR[1, 0]
    _tmp68 = -_tmp42 * logR[0, 0] + _tmp64 + _tmp66 + _tmp67
    _tmp69 = _tmp41 * logR[1, 0]
    _tmp70 = _tmp69 * w[0, 0]
    _tmp71 = _tmp47 * logR[2, 0]
    _tmp72 = _tmp38 * w[2, 0]
    _tmp73 = _tmp43 * logR[0, 0]
    _tmp74 = -_tmp70 + _tmp71 + _tmp72 + _tmp73
    _tmp75 = _tmp3 ** (-3.0 / 2.0)
    _tmp76 = _tmp75 * _tmp8
    _tmp77 = _tmp15 * _tmp76
    _tmp78 = _tmp0 * _tmp77
    _tmp79 = _tmp78 * logR[2, 0]
    _tmp80 = _tmp14**2
    _tmp81 = _tmp18 * _tmp80
    _tmp82 = _tmp81 * logR[0, 0]
    _tmp83 = _tmp19 * logR[0, 0]
    _tmp84 = 4 * _tmp9
    _tmp85 = _tmp84 / _tmp3**2
    _tmp86 = _tmp85 * logR[2, 0]
    _tmp87 = _tmp0 * _tmp86
    _tmp88 = logR[0, 0] * logR[1, 0]
    _tmp89 = _tmp77 * _tmp88
    _tmp90 = dt * thrust
    _tmp91 = -_tmp86 * _tmp88 + _tmp89 * logR[2, 0]
    _tmp92 = _tmp2 * _tmp85
    _tmp93 = logR[0, 0] ** 3
    _tmp94 = _tmp4 * logR[0, 0]
    _tmp95 = _tmp2 * _tmp77
    _tmp96 = (1.0 / 2.0) * _tmp48
    _tmp97 = _tmp5 * logR[0, 0]
    _tmp98 = (1.0 / 2.0) * _tmp72
    _tmp99 = _tmp97 * _tmp98
    _tmp100 = logR[0, 0] * logR[2, 0]
    _tmp101 = _tmp40 * _tmp76
    _tmp102 = _tmp101 * w[2, 0]
    _tmp103 = _tmp100 * _tmp102
    _tmp104 = (1.0 / 2.0) * _tmp39
    _tmp105 = _tmp101 * w[0, 0]
    _tmp106 = _tmp101 * w[1, 0]
    _tmp107 = (1.0 / 2.0) * logR[0, 0]
    _tmp108 = _tmp107 * _tmp18
    _tmp109 = -_tmp106 * _tmp88 + _tmp108 * _tmp64
    _tmp110 = -_tmp0 * _tmp105 - _tmp103 + _tmp104 * _tmp24 + _tmp109 + _tmp65 + _tmp96 + _tmp99
    _tmp111 = -_tmp50 + _tmp54
    _tmp112 = abs(_tmp111)
    _tmp113 = min(0.999999, _tmp112)
    _tmp114 = 1 - _tmp113**2
    _tmp115 = ((0.0 if 0.999999 - _tmp112 == 0 else math.copysign(1, 0.999999 - _tmp112)) + 1) * (
        0.0 if _tmp111 == 0 else math.copysign(1, _tmp111)
    )
    _tmp116 = _tmp115 / _tmp114
    _tmp117 = _tmp49 * _tmp61
    _tmp118 = _tmp116 * _tmp117
    _tmp119 = _tmp102 * _tmp88
    _tmp120 = _tmp100 * _tmp106
    _tmp121 = (1.0 / 2.0) * _tmp50
    _tmp122 = _tmp46 * _tmp75
    _tmp123 = _tmp108 * _tmp72
    _tmp124 = (1.0 / 2.0) * _tmp64
    _tmp125 = _tmp124 * _tmp97
    _tmp126 = math.acos(_tmp113)
    _tmp127 = _tmp126 * _tmp62 / math.sqrt(_tmp114)
    _tmp128 = _tmp113 * _tmp115 * _tmp126 / _tmp114 ** (3.0 / 2.0)
    _tmp129 = _tmp110 * _tmp128
    _tmp130 = _tmp61 * _tmp68
    _tmp131 = _tmp116 * _tmp130
    _tmp132 = _tmp0 * _tmp101
    _tmp133 = _tmp121 * _tmp18
    _tmp134 = -_tmp122 * _tmp88 + _tmp133 * logR[0, 0]
    _tmp135 = -_tmp100 * _tmp105 + _tmp104 * _tmp97
    _tmp136 = _tmp105 * _tmp88
    _tmp137 = (1.0 / 2.0) * w[2, 0]
    _tmp138 = _tmp104 * _tmp18
    _tmp139 = _tmp138 * logR[0, 0]
    _tmp140 = _tmp122 * logR[2, 0]
    _tmp141 = _tmp121 * _tmp97 - _tmp140 * logR[0, 0]
    _tmp142 = _tmp61 * _tmp74
    _tmp143 = _tmp116 * _tmp142
    _tmp144 = _tmp92 * logR[2, 0]
    _tmp145 = _tmp95 * logR[2, 0]
    _tmp146 = _tmp85 * logR[1, 0]
    _tmp147 = logR[1, 0] ** 3
    _tmp148 = (1.0 / 2.0) * _tmp67
    _tmp149 = logR[1, 0] * logR[2, 0]
    _tmp150 = _tmp18 * logR[2, 0]
    _tmp151 = -_tmp102 * _tmp149 + _tmp150 * _tmp98
    _tmp152 = -_tmp106 * _tmp2 + _tmp124 * _tmp22 - _tmp136 + _tmp139 + _tmp148 + _tmp151 + _tmp43
    _tmp153 = _tmp128 * _tmp152
    _tmp154 = _tmp124 * _tmp150
    _tmp155 = _tmp106 * _tmp149
    _tmp156 = _tmp105 * _tmp149
    _tmp157 = _tmp138 * logR[2, 0]
    _tmp158 = _tmp133 * logR[2, 0] - _tmp140 * logR[1, 0]
    _tmp159 = _tmp1 * logR[0, 0]
    _tmp160 = _tmp77 * logR[1, 0]
    _tmp161 = _tmp1 * _tmp4
    _tmp162 = (1.0 / 2.0) * _tmp71
    _tmp163 = -_tmp1 * _tmp102 + _tmp135 + _tmp154 - _tmp155 + _tmp161 * _tmp98 + _tmp162 + _tmp42
    _tmp164 = _tmp116 * _tmp163
    _tmp165 = _tmp128 * _tmp163
    _tmp166 = _tmp41 * logR[2, 0]
    _tmp167 = _tmp28 * _tmp36
    _tmp168 = _tmp167 * _tmp35
    _tmp169 = (1.0 / 2.0) * _tmp168
    _tmp170 = 1 / _tmp31
    _tmp171 = dt**3
    _tmp172 = _tmp171 * _tmp30
    _tmp173 = _tmp170 * _tmp172
    _tmp174 = _tmp171 * w[0, 0]
    _tmp175 = _tmp174 * w[2, 0]
    _tmp176 = _tmp31 ** (-3.0 / 2.0)
    _tmp177 = _tmp13 * _tmp34
    _tmp178 = _tmp176 * _tmp177
    _tmp179 = _tmp178 * logR[2, 0]
    _tmp180 = _tmp175 * _tmp179
    _tmp181 = _tmp178 * logR[0, 0]
    _tmp182 = _tmp162 * _tmp170
    _tmp183 = _tmp175 * _tmp182
    _tmp184 = -_tmp52
    _tmp185 = _tmp148 * _tmp170
    _tmp186 = _tmp174 * w[1, 0]
    _tmp187 = _tmp178 * logR[1, 0]
    _tmp188 = -_tmp185 * _tmp186 + _tmp186 * _tmp187
    _tmp189 = (
        -_tmp169 * w[0, 0]
        + _tmp172 * _tmp181
        - _tmp173 * _tmp96
        + _tmp180
        - _tmp183
        + _tmp184
        + _tmp188
    )
    _tmp190 = _tmp60 * (
        (0.0 if 0.999999 - _tmp56 == 0 else math.copysign(1, 0.999999 - _tmp56)) + 1
    )
    _tmp191 = _tmp190 / _tmp58
    _tmp192 = _tmp189 * _tmp191
    _tmp193 = _tmp182 * _tmp186
    _tmp194 = _tmp167 * _tmp177
    _tmp195 = _tmp107 * _tmp194
    _tmp196 = _tmp175 * _tmp185
    _tmp197 = _tmp121 * _tmp170
    _tmp198 = _tmp176 * _tmp35
    _tmp199 = _tmp179 * _tmp186
    _tmp200 = _tmp175 * _tmp187
    _tmp201 = _tmp190 * _tmp57 * _tmp59 / _tmp58 ** (3.0 / 2.0)
    _tmp202 = _tmp117 * _tmp201
    _tmp203 = _tmp130 * _tmp201
    _tmp204 = _tmp194 * logR[1, 0]
    _tmp205 = (1.0 / 2.0) * w[0, 0]
    _tmp206 = _tmp172 * _tmp178
    _tmp207 = _tmp171 * _tmp198
    _tmp208 = _tmp207 * w[0, 0]
    _tmp209 = _tmp171 * _tmp197
    _tmp210 = _tmp209 * w[0, 0]
    _tmp211 = -_tmp208 * w[1, 0] + _tmp210 * w[1, 0]
    _tmp212 = _tmp170 * _tmp96
    _tmp213 = _tmp175 * _tmp181 - _tmp175 * _tmp212
    _tmp214 = -_tmp69
    _tmp215 = _tmp194 * logR[2, 0]
    _tmp216 = _tmp181 * _tmp186
    _tmp217 = _tmp186 * _tmp212
    _tmp218 = -_tmp208 * w[2, 0] + _tmp210 * w[2, 0]
    _tmp219 = _tmp142 * _tmp201
    _tmp220 = w[1, 0] * w[2, 0]
    _tmp221 = _tmp171 * _tmp220
    _tmp222 = _tmp185 * _tmp221
    _tmp223 = _tmp187 * _tmp221
    _tmp224 = -_tmp166
    _tmp225 = _tmp171 * _tmp29
    _tmp226 = _tmp170 * _tmp225
    _tmp227 = _tmp178 * _tmp225
    _tmp228 = _tmp179 * _tmp221 - _tmp182 * _tmp221
    _tmp229 = (
        -_tmp169 * w[1, 0]
        - _tmp185 * _tmp225
        + _tmp214
        + _tmp216
        - _tmp217
        + _tmp227 * logR[1, 0]
        + _tmp228
    )
    _tmp230 = _tmp191 * _tmp229
    _tmp231 = _tmp181 * _tmp221
    _tmp232 = (1.0 / 2.0) * w[1, 0]
    _tmp233 = _tmp212 * _tmp221
    _tmp234 = -_tmp207 * _tmp220 + _tmp209 * _tmp220
    _tmp235 = _tmp171 * _tmp27
    _tmp236 = _tmp170 * _tmp235
    _tmp237 = _tmp178 * _tmp235
    _tmp238 = (
        -_tmp137 * _tmp168
        - _tmp162 * _tmp236
        + _tmp213
        - _tmp222
        + _tmp223
        + _tmp224
        + _tmp237 * logR[2, 0]
    )
    _tmp239 = _tmp191 * _tmp238

    # Output terms
    _ierr_p_v_logR_w = numpy.zeros(15)
    _ierr_p_v_logR_w[0] = dt * (p[0, 0] - p_d[0, 0]) + ierr[0, 0]
    _ierr_p_v_logR_w[1] = dt * (p[1, 0] - p_d[1, 0]) + ierr[1, 0]
    _ierr_p_v_logR_w[2] = dt * (p[2, 0] - p_d[2, 0]) + ierr[2, 0]
    _ierr_p_v_logR_w[3] = dt * v[0, 0] + p[0, 0]
    _ierr_p_v_logR_w[4] = dt * v[1, 0] + p[1, 0]
    _ierr_p_v_logR_w[5] = dt * v[2, 0] + p[2, 0]
    _ierr_p_v_logR_w[6] = _tmp17 * thrust + v[0, 0]
    _ierr_p_v_logR_w[7] = _tmp21 * thrust + v[1, 0]
    _ierr_p_v_logR_w[8] = dt * (_tmp26 * thrust - 9.81) + v[2, 0]
    _ierr_p_v_logR_w[9] = _tmp49 * _tmp63
    _ierr_p_v_logR_w[10] = _tmp63 * _tmp68
    _ierr_p_v_logR_w[11] = _tmp63 * _tmp74
    _ierr_p_v_logR_w[12] = dt * torque[0, 0] + w[0, 0]
    _ierr_p_v_logR_w[13] = dt * torque[1, 0] + w[1, 0]
    _ierr_p_v_logR_w[14] = dt * torque[2, 0] + w[2, 0]
    _jacobian = numpy.zeros((15, 19))
    _jacobian[0, 0] = 1
    _jacobian[1, 0] = 0
    _jacobian[2, 0] = 0
    _jacobian[3, 0] = 0
    _jacobian[4, 0] = 0
    _jacobian[5, 0] = 0
    _jacobian[6, 0] = 0
    _jacobian[7, 0] = 0
    _jacobian[8, 0] = 0
    _jacobian[9, 0] = 0
    _jacobian[10, 0] = 0
    _jacobian[11, 0] = 0
    _jacobian[12, 0] = 0
    _jacobian[13, 0] = 0
    _jacobian[14, 0] = 0
    _jacobian[0, 1] = 0
    _jacobian[1, 1] = 1
    _jacobian[2, 1] = 0
    _jacobian[3, 1] = 0
    _jacobian[4, 1] = 0
    _jacobian[5, 1] = 0
    _jacobian[6, 1] = 0
    _jacobian[7, 1] = 0
    _jacobian[8, 1] = 0
    _jacobian[9, 1] = 0
    _jacobian[10, 1] = 0
    _jacobian[11, 1] = 0
    _jacobian[12, 1] = 0
    _jacobian[13, 1] = 0
    _jacobian[14, 1] = 0
    _jacobian[0, 2] = 0
    _jacobian[1, 2] = 0
    _jacobian[2, 2] = 1
    _jacobian[3, 2] = 0
    _jacobian[4, 2] = 0
    _jacobian[5, 2] = 0
    _jacobian[6, 2] = 0
    _jacobian[7, 2] = 0
    _jacobian[8, 2] = 0
    _jacobian[9, 2] = 0
    _jacobian[10, 2] = 0
    _jacobian[11, 2] = 0
    _jacobian[12, 2] = 0
    _jacobian[13, 2] = 0
    _jacobian[14, 2] = 0
    _jacobian[0, 3] = dt
    _jacobian[1, 3] = 0
    _jacobian[2, 3] = 0
    _jacobian[3, 3] = 1
    _jacobian[4, 3] = 0
    _jacobian[5, 3] = 0
    _jacobian[6, 3] = 0
    _jacobian[7, 3] = 0
    _jacobian[8, 3] = 0
    _jacobian[9, 3] = 0
    _jacobian[10, 3] = 0
    _jacobian[11, 3] = 0
    _jacobian[12, 3] = 0
    _jacobian[13, 3] = 0
    _jacobian[14, 3] = 0
    _jacobian[0, 4] = 0
    _jacobian[1, 4] = dt
    _jacobian[2, 4] = 0
    _jacobian[3, 4] = 0
    _jacobian[4, 4] = 1
    _jacobian[5, 4] = 0
    _jacobian[6, 4] = 0
    _jacobian[7, 4] = 0
    _jacobian[8, 4] = 0
    _jacobian[9, 4] = 0
    _jacobian[10, 4] = 0
    _jacobian[11, 4] = 0
    _jacobian[12, 4] = 0
    _jacobian[13, 4] = 0
    _jacobian[14, 4] = 0
    _jacobian[0, 5] = 0
    _jacobian[1, 5] = 0
    _jacobian[2, 5] = dt
    _jacobian[3, 5] = 0
    _jacobian[4, 5] = 0
    _jacobian[5, 5] = 1
    _jacobian[6, 5] = 0
    _jacobian[7, 5] = 0
    _jacobian[8, 5] = 0
    _jacobian[9, 5] = 0
    _jacobian[10, 5] = 0
    _jacobian[11, 5] = 0
    _jacobian[12, 5] = 0
    _jacobian[13, 5] = 0
    _jacobian[14, 5] = 0
    _jacobian[0, 6] = 0
    _jacobian[1, 6] = 0
    _jacobian[2, 6] = 0
    _jacobian[3, 6] = dt
    _jacobian[4, 6] = 0
    _jacobian[5, 6] = 0
    _jacobian[6, 6] = 1
    _jacobian[7, 6] = 0
    _jacobian[8, 6] = 0
    _jacobian[9, 6] = 0
    _jacobian[10, 6] = 0
    _jacobian[11, 6] = 0
    _jacobian[12, 6] = 0
    _jacobian[13, 6] = 0
    _jacobian[14, 6] = 0
    _jacobian[0, 7] = 0
    _jacobian[1, 7] = 0
    _jacobian[2, 7] = 0
    _jacobian[3, 7] = 0
    _jacobian[4, 7] = dt
    _jacobian[5, 7] = 0
    _jacobian[6, 7] = 0
    _jacobian[7, 7] = 1
    _jacobian[8, 7] = 0
    _jacobian[9, 7] = 0
    _jacobian[10, 7] = 0
    _jacobian[11, 7] = 0
    _jacobian[12, 7] = 0
    _jacobian[13, 7] = 0
    _jacobian[14, 7] = 0
    _jacobian[0, 8] = 0
    _jacobian[1, 8] = 0
    _jacobian[2, 8] = 0
    _jacobian[3, 8] = 0
    _jacobian[4, 8] = 0
    _jacobian[5, 8] = dt
    _jacobian[6, 8] = 0
    _jacobian[7, 8] = 0
    _jacobian[8, 8] = 1
    _jacobian[9, 8] = 0
    _jacobian[10, 8] = 0
    _jacobian[11, 8] = 0
    _jacobian[12, 8] = 0
    _jacobian[13, 8] = 0
    _jacobian[14, 8] = 0
    _jacobian[0, 9] = 0
    _jacobian[1, 9] = 0
    _jacobian[2, 9] = 0
    _jacobian[3, 9] = 0
    _jacobian[4, 9] = 0
    _jacobian[5, 9] = 0
    _jacobian[6, 9] = _tmp90 * (_tmp11 + _tmp79 + _tmp82 - _tmp83 - _tmp87 - _tmp89)
    _jacobian[7, 9] = _tmp90 * (-_tmp16 - _tmp24 * _tmp80 + _tmp25 + _tmp78 + _tmp91)
    _jacobian[8, 9] = _tmp90 * (
        -_tmp77 * _tmp93
        - _tmp84 * _tmp94
        + _tmp85 * _tmp93
        + _tmp92 * logR[0, 0]
        - _tmp95 * logR[0, 0]
    )
    _jacobian[9, 9] = (
        -_tmp110 * _tmp118
        + _tmp117 * _tmp129
        + _tmp127
        * (
            -_tmp0 * _tmp122
            - _tmp119
            + _tmp120
            + _tmp121 * _tmp24
            + _tmp123
            - _tmp125
            + _tmp47
            - 1.0 / 2.0 * _tmp53
        )
    )
    _jacobian[10, 9] = (
        -_tmp110 * _tmp131
        + _tmp127
        * (_tmp132 * w[2, 0] + _tmp134 + _tmp135 - _tmp24 * _tmp98 - _tmp42 - 1.0 / 2.0 * _tmp73)
        + _tmp129 * _tmp130
    )
    _jacobian[11, 9] = (
        -_tmp110 * _tmp143
        + _tmp127
        * (
            _tmp124 * _tmp24
            - _tmp132 * w[1, 0]
            + _tmp136
            - _tmp137 * _tmp52
            - _tmp139
            + _tmp141
            + _tmp43
        )
        + _tmp129 * _tmp142
    )
    _jacobian[12, 9] = 0
    _jacobian[13, 9] = 0
    _jacobian[14, 9] = 0
    _jacobian[0, 10] = 0
    _jacobian[1, 10] = 0
    _jacobian[2, 10] = 0
    _jacobian[3, 10] = 0
    _jacobian[4, 10] = 0
    _jacobian[5, 10] = 0
    _jacobian[6, 10] = _tmp90 * (_tmp16 + _tmp22 * _tmp80 - _tmp23 + _tmp91 - _tmp95)
    _jacobian[7, 10] = _tmp90 * (_tmp11 - _tmp144 + _tmp145 - _tmp82 + _tmp83 + _tmp89)
    _jacobian[8, 10] = _tmp90 * (
        _tmp0 * _tmp146 - _tmp147 * _tmp77 + _tmp147 * _tmp85 - 4 * _tmp19 - _tmp78 * logR[1, 0]
    )
    _jacobian[9, 10] = (
        _tmp117 * _tmp153
        - _tmp118 * _tmp152
        + _tmp127
        * (
            -_tmp102 * _tmp2
            + _tmp134
            - _tmp154
            + _tmp155
            + _tmp22 * _tmp98
            + _tmp42
            - 1.0 / 2.0 * _tmp70
        )
    )
    _jacobian[10, 10] = (
        _tmp127
        * (
            _tmp119
            + _tmp121 * _tmp22
            - _tmp122 * _tmp2
            - _tmp123
            - _tmp156
            + _tmp157
            + _tmp47
            - 1.0 / 2.0 * _tmp51
        )
        + _tmp130 * _tmp153
        - _tmp131 * _tmp152
    )
    _jacobian[11, 10] = (
        _tmp127
        * (-_tmp104 * _tmp22 + _tmp105 * _tmp2 + _tmp109 - _tmp137 * _tmp69 + _tmp158 - _tmp65)
        + _tmp142 * _tmp153
        - _tmp143 * _tmp152
    )
    _jacobian[12, 10] = 0
    _jacobian[13, 10] = 0
    _jacobian[14, 10] = 0
    _jacobian[0, 11] = 0
    _jacobian[1, 11] = 0
    _jacobian[2, 11] = 0
    _jacobian[3, 11] = 0
    _jacobian[4, 11] = 0
    _jacobian[5, 11] = 0
    _jacobian[6, 11] = _tmp90 * (
        _tmp10 * _tmp94
        + _tmp159 * _tmp77
        - _tmp159 * _tmp85
        - _tmp160 * logR[2, 0]
        - _tmp19 * logR[2, 0]
        + _tmp81 * logR[2, 0]
    )
    _jacobian[7, 11] = _tmp90 * (
        -_tmp1 * _tmp146
        + _tmp1 * _tmp160
        + _tmp100 * _tmp77
        + _tmp20
        - _tmp80 * _tmp97
        + _tmp9 * _tmp97
    )
    _jacobian[8, 11] = _tmp90 * (_tmp144 - _tmp145 - _tmp79 + _tmp87)
    _jacobian[9, 11] = (
        -_tmp117 * _tmp164
        + _tmp117 * _tmp165
        + _tmp127
        * (_tmp1 * _tmp106 - _tmp124 * _tmp161 + _tmp141 + _tmp151 - _tmp43 - 1.0 / 2.0 * _tmp66)
    )
    _jacobian[10, 11] = (
        _tmp127
        * (
            -_tmp1 * _tmp105
            + _tmp103
            + _tmp104 * _tmp161
            + _tmp158
            - 1.0 / 2.0 * _tmp44
            + _tmp65
            - _tmp99
        )
        + _tmp130 * _tmp165
        - _tmp131 * _tmp163
    )
    _jacobian[11, 11] = (
        _tmp127
        * (
            -_tmp1 * _tmp122
            - _tmp120
            + _tmp121 * _tmp161
            + _tmp125
            - _tmp137 * _tmp166
            + _tmp156
            - _tmp157
            + _tmp47
        )
        - _tmp142 * _tmp164
        + _tmp142 * _tmp165
    )
    _jacobian[12, 11] = 0
    _jacobian[13, 11] = 0
    _jacobian[14, 11] = 0
    _jacobian[0, 12] = 0
    _jacobian[1, 12] = 0
    _jacobian[2, 12] = 0
    _jacobian[3, 12] = 0
    _jacobian[4, 12] = 0
    _jacobian[5, 12] = 0
    _jacobian[6, 12] = 0
    _jacobian[7, 12] = 0
    _jacobian[8, 12] = 0
    _jacobian[9, 12] = (
        -_tmp117 * _tmp192
        + _tmp189 * _tmp202
        + _tmp63
        * (
            _tmp172 * _tmp197
            - _tmp172 * _tmp198
            - _tmp193
            - _tmp195 * w[0, 0]
            + _tmp196
            + _tmp199
            - _tmp200
            + _tmp38
        )
    )
    _jacobian[10, 12] = (
        -_tmp130 * _tmp192
        + _tmp189 * _tmp203
        + _tmp63
        * (
            _tmp162 * _tmp173
            + _tmp166
            - _tmp204 * _tmp205
            - _tmp206 * logR[2, 0]
            + _tmp211
            + _tmp213
        )
    )
    _jacobian[11, 12] = (
        -_tmp142 * _tmp192
        + _tmp189 * _tmp219
        + _tmp63
        * (
            -_tmp172 * _tmp185
            - _tmp205 * _tmp215
            + _tmp206 * logR[1, 0]
            + _tmp214
            - _tmp216
            + _tmp217
            + _tmp218
        )
    )
    _jacobian[12, 12] = 1
    _jacobian[13, 12] = 0
    _jacobian[14, 12] = 0
    _jacobian[0, 13] = 0
    _jacobian[1, 13] = 0
    _jacobian[2, 13] = 0
    _jacobian[3, 13] = 0
    _jacobian[4, 13] = 0
    _jacobian[5, 13] = 0
    _jacobian[6, 13] = 0
    _jacobian[7, 13] = 0
    _jacobian[8, 13] = 0
    _jacobian[9, 13] = (
        -_tmp117 * _tmp230
        + _tmp202 * _tmp229
        + _tmp63
        * (
            -_tmp162 * _tmp226
            - _tmp195 * w[1, 0]
            + _tmp211
            + _tmp222
            - _tmp223
            + _tmp224
            + _tmp227 * logR[2, 0]
        )
    )
    _jacobian[10, 13] = (
        -_tmp130 * _tmp230
        + _tmp203 * _tmp229
        + _tmp63
        * (
            _tmp193
            - _tmp199
            - _tmp204 * _tmp232
            - _tmp207 * _tmp29
            + _tmp209 * _tmp29
            + _tmp231
            - _tmp233
            + _tmp38
        )
    )
    _jacobian[11, 13] = (
        -_tmp142 * _tmp230
        + _tmp219 * _tmp229
        + _tmp63
        * (-_tmp181 * _tmp225 + _tmp188 - _tmp215 * _tmp232 + _tmp226 * _tmp96 + _tmp234 + _tmp52)
    )
    _jacobian[12, 13] = 0
    _jacobian[13, 13] = 1
    _jacobian[14, 13] = 0
    _jacobian[0, 14] = 0
    _jacobian[1, 14] = 0
    _jacobian[2, 14] = 0
    _jacobian[3, 14] = 0
    _jacobian[4, 14] = 0
    _jacobian[5, 14] = 0
    _jacobian[6, 14] = 0
    _jacobian[7, 14] = 0
    _jacobian[8, 14] = 0
    _jacobian[9, 14] = (
        -_tmp117 * _tmp239
        + _tmp202 * _tmp238
        + _tmp63
        * (
            -_tmp137 * _tmp194 * logR[0, 0]
            + _tmp148 * _tmp236
            + _tmp218
            + _tmp228
            - _tmp237 * logR[1, 0]
            + _tmp69
        )
    )
    _jacobian[10, 14] = (
        -_tmp130 * _tmp239
        + _tmp203 * _tmp238
        + _tmp63
        * (
            -_tmp137 * _tmp204
            - _tmp180
            + _tmp183
            + _tmp184
            + _tmp234
            - _tmp236 * _tmp96
            + _tmp237 * logR[0, 0]
        )
    )
    _jacobian[11, 14] = (
        -_tmp142 * _tmp239
        + _tmp219 * _tmp238
        + _tmp63
        * (
            -_tmp137 * _tmp215
            - _tmp196
            + _tmp197 * _tmp235
            + _tmp200
            - _tmp207 * _tmp27
            - _tmp231
            + _tmp233
            + _tmp38
        )
    )
    _jacobian[12, 14] = 0
    _jacobian[13, 14] = 0
    _jacobian[14, 14] = 1
    _jacobian[0, 15] = 0
    _jacobian[1, 15] = 0
    _jacobian[2, 15] = 0
    _jacobian[3, 15] = 0
    _jacobian[4, 15] = 0
    _jacobian[5, 15] = 0
    _jacobian[6, 15] = _tmp17
    _jacobian[7, 15] = _tmp21
    _jacobian[8, 15] = _tmp26 * dt
    _jacobian[9, 15] = 0
    _jacobian[10, 15] = 0
    _jacobian[11, 15] = 0
    _jacobian[12, 15] = 0
    _jacobian[13, 15] = 0
    _jacobian[14, 15] = 0
    _jacobian[0, 16] = 0
    _jacobian[1, 16] = 0
    _jacobian[2, 16] = 0
    _jacobian[3, 16] = 0
    _jacobian[4, 16] = 0
    _jacobian[5, 16] = 0
    _jacobian[6, 16] = 0
    _jacobian[7, 16] = 0
    _jacobian[8, 16] = 0
    _jacobian[9, 16] = 0
    _jacobian[10, 16] = 0
    _jacobian[11, 16] = 0
    _jacobian[12, 16] = dt
    _jacobian[13, 16] = 0
    _jacobian[14, 16] = 0
    _jacobian[0, 17] = 0
    _jacobian[1, 17] = 0
    _jacobian[2, 17] = 0
    _jacobian[3, 17] = 0
    _jacobian[4, 17] = 0
    _jacobian[5, 17] = 0
    _jacobian[6, 17] = 0
    _jacobian[7, 17] = 0
    _jacobian[8, 17] = 0
    _jacobian[9, 17] = 0
    _jacobian[10, 17] = 0
    _jacobian[11, 17] = 0
    _jacobian[12, 17] = 0
    _jacobian[13, 17] = dt
    _jacobian[14, 17] = 0
    _jacobian[0, 18] = 0
    _jacobian[1, 18] = 0
    _jacobian[2, 18] = 0
    _jacobian[3, 18] = 0
    _jacobian[4, 18] = 0
    _jacobian[5, 18] = 0
    _jacobian[6, 18] = 0
    _jacobian[7, 18] = 0
    _jacobian[8, 18] = 0
    _jacobian[9, 18] = 0
    _jacobian[10, 18] = 0
    _jacobian[11, 18] = 0
    _jacobian[12, 18] = 0
    _jacobian[13, 18] = 0
    _jacobian[14, 18] = dt
    return _ierr_p_v_logR_w, _jacobian
