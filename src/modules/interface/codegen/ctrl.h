// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>



namespace sym {


/**
* This function was autogenerated from a symbolic function. Do not modify by hand.
*
* Symbolic function: ctrl_symfn
*
* Args:
*     ierr: Matrix31
*     p: Matrix31
*     v: Matrix31
*     logR: Matrix31
*     w: Matrix31
*     p_d: Matrix31
*     v_d: Matrix31
*     a_d: Matrix31
*     w_d: Matrix31
*     theta_pos: Matrix61
*     theta_rot: Matrix41
*     dt: Scalar
*
* Outputs:
*     thrust_torque: Matrix41
*     jacobian: (4x25) jacobian of thrust_torque wrt args ierr (3), p (3), v (3), logR (3), w (3),
*               theta_pos (6), theta_rot (4)
*/
template <typename Scalar>
void Ctrl(const Eigen::Matrix<Scalar, 3, 1>& ierr, const Eigen::Matrix<Scalar, 3, 1>& p, const Eigen::Matrix<Scalar, 3, 1>& v, const Eigen::Matrix<Scalar, 3, 1>& logR, const Eigen::Matrix<Scalar, 3, 1>& w, const Eigen::Matrix<Scalar, 3, 1>& p_d, const Eigen::Matrix<Scalar, 3, 1>& v_d, const Eigen::Matrix<Scalar, 3, 1>& a_d, const Eigen::Matrix<Scalar, 3, 1>& w_d, const Eigen::Matrix<Scalar, 6, 1>& theta_pos, const Eigen::Matrix<Scalar, 4, 1>& theta_rot, const Scalar dt, Eigen::Matrix<Scalar, 4, 1>* const thrust_torque = nullptr, Eigen::Matrix<Scalar, 4, 25>* const jacobian = nullptr) {

    // Total ops: 1506

    // Unused inputs
    (void)dt;

    // Input arrays

    // Intermediate terms (349)
    const Scalar _tmp0 = std::exp(theta_pos(2, 0));
    const Scalar _tmp1 = _tmp0*(p(0, 0) - p_d(0, 0));
    const Scalar _tmp2 = std::exp(theta_pos(4, 0));
    const Scalar _tmp3 = _tmp2*(v(0, 0) - v_d(0, 0));
    const Scalar _tmp4 = std::exp(theta_pos(0, 0));
    const Scalar _tmp5 = _tmp4*ierr(0, 0);
    const Scalar _tmp6 = -_tmp1 - _tmp3 - _tmp5 + a_d(0, 0);
    const Scalar _tmp7 = std::pow(logR(0, 0), Scalar(2));
    const Scalar _tmp8 = std::pow(logR(2, 0), Scalar(2));
    const Scalar _tmp9 = std::pow(logR(1, 0), Scalar(2));
    const Scalar _tmp10 = _tmp7 + _tmp8 + _tmp9 + Scalar(9.9999999999999998e-13);
    const Scalar _tmp11 = Scalar(1.0) / (_tmp10);
    const Scalar _tmp12 = std::sqrt(_tmp10);
    const Scalar _tmp13 = (Scalar(1)/Scalar(2))*_tmp12;
    const Scalar _tmp14 = std::sin(_tmp13);
    const Scalar _tmp15 = std::pow(_tmp14, Scalar(2));
    const Scalar _tmp16 = _tmp11*_tmp15;
    const Scalar _tmp17 = 2*_tmp16;
    const Scalar _tmp18 = _tmp17*logR(2, 0);
    const Scalar _tmp19 = _tmp14/_tmp12;
    const Scalar _tmp20 = _tmp19*logR(1, 0);
    const Scalar _tmp21 = std::cos(_tmp13);
    const Scalar _tmp22 = 2*_tmp21;
    const Scalar _tmp23 = _tmp18*logR(0, 0) + _tmp20*_tmp22;
    const Scalar _tmp24 = _tmp16*_tmp9;
    const Scalar _tmp25 = _tmp16*_tmp7;
    const Scalar _tmp26 = -2*_tmp24 - 2*_tmp25 + 1;
    const Scalar _tmp27 = std::exp(theta_pos(3, 0));
    const Scalar _tmp28 = _tmp27*(p(2, 0) - p_d(2, 0));
    const Scalar _tmp29 = std::exp(theta_pos(5, 0));
    const Scalar _tmp30 = _tmp29*(v(2, 0) - v_d(2, 0));
    const Scalar _tmp31 = std::exp(theta_pos(1, 0));
    const Scalar _tmp32 = _tmp31*ierr(2, 0);
    const Scalar _tmp33 = -_tmp28 - _tmp30 - _tmp32 + a_d(2, 0) + Scalar(9.8100000000000005);
    const Scalar _tmp34 = p(1, 0) - p_d(1, 0);
    const Scalar _tmp35 = _tmp0*_tmp34;
    const Scalar _tmp36 = v(1, 0) - v_d(1, 0);
    const Scalar _tmp37 = _tmp2*_tmp36;
    const Scalar _tmp38 = _tmp4*ierr(1, 0);
    const Scalar _tmp39 = -_tmp35 - _tmp37 - _tmp38 + a_d(1, 0);
    const Scalar _tmp40 = _tmp19*logR(0, 0);
    const Scalar _tmp41 = _tmp18*logR(1, 0) - _tmp22*_tmp40;
    const Scalar _tmp42 = std::pow(_tmp33, Scalar(2));
    const Scalar _tmp43 = std::pow(_tmp39, Scalar(2));
    const Scalar _tmp44 = std::pow(_tmp6, Scalar(2));
    const Scalar _tmp45 = _tmp42 + _tmp43 + _tmp44 + Scalar(9.9999999999999995e-7);
    const Scalar _tmp46 = std::pow(_tmp45, Scalar(Scalar(-1)/Scalar(2)));
    const Scalar _tmp47 = _tmp39*_tmp46;
    const Scalar _tmp48 = _tmp33*_tmp46;
    const Scalar _tmp49 = 2*_tmp48 + Scalar(2.0000010000000001);
    const Scalar _tmp50 = std::sqrt(_tmp49);
    const Scalar _tmp51 = Scalar(1.0) / (_tmp50);
    const Scalar _tmp52 = (((std::fabs(_tmp48 + 1) + Scalar(-9.9999999999999995e-7)) > 0) - ((std::fabs(_tmp48 + 1) + Scalar(-9.9999999999999995e-7)) < 0)) + 1;
    const Scalar _tmp53 = (Scalar(1)/Scalar(2))*_tmp52;
    const Scalar _tmp54 = _tmp51*_tmp53;
    const Scalar _tmp55 = -_tmp47*_tmp54 - _tmp53 + 1;
    const Scalar _tmp56 = _tmp21*_tmp55;
    const Scalar _tmp57 = _tmp19*logR(2, 0);
    const Scalar _tmp58 = _tmp46*_tmp54;
    const Scalar _tmp59 = _tmp58*_tmp6;
    const Scalar _tmp60 = (Scalar(1)/Scalar(4))*_tmp50;
    const Scalar _tmp61 = _tmp52*_tmp60;
    const Scalar _tmp62 = _tmp40*_tmp61 - _tmp56 + _tmp57*_tmp59;
    const Scalar _tmp63 = std::exp(theta_rot(0, 0));
    const Scalar _tmp64 = _tmp20*_tmp59;
    const Scalar _tmp65 = _tmp19*_tmp55;
    const Scalar _tmp66 = _tmp65*logR(0, 0);
    const Scalar _tmp67 = -_tmp64 - _tmp66;
    const Scalar _tmp68 = _tmp21*_tmp52;
    const Scalar _tmp69 = _tmp60*_tmp68;
    const Scalar _tmp70 = 2*std::min<Scalar>(0, (((-_tmp67 + _tmp69) > 0) - ((-_tmp67 + _tmp69) < 0))) + 1;
    const Scalar _tmp71 = 2*_tmp70;
    const Scalar _tmp72 = _tmp63*_tmp71;
    const Scalar _tmp73 = _tmp62*_tmp72;
    const Scalar _tmp74 = std::min<Scalar>(Scalar(0.99999899999999997), std::fabs(_tmp67 - _tmp69));
    const Scalar _tmp75 = std::acos(_tmp74)/std::sqrt(Scalar(1 - std::pow(_tmp74, Scalar(2))));
    const Scalar _tmp76 = std::exp(theta_rot(2, 0));
    const Scalar _tmp77 = w(0, 0) - w_d(0, 0);
    const Scalar _tmp78 = -_tmp76*_tmp77;
    const Scalar _tmp79 = _tmp21*_tmp58;
    const Scalar _tmp80 = _tmp65*logR(2, 0);
    const Scalar _tmp81 = _tmp20*_tmp61 - _tmp6*_tmp79 - _tmp80;
    const Scalar _tmp82 = w(1, 0) - w_d(1, 0);
    const Scalar _tmp83 = -_tmp76*_tmp82;
    const Scalar _tmp84 = _tmp65*logR(1, 0);
    const Scalar _tmp85 = -_tmp40*_tmp59 + _tmp57*_tmp61 + _tmp84;
    const Scalar _tmp86 = std::exp(theta_rot(1, 0));
    const Scalar _tmp87 = _tmp71*_tmp86;
    const Scalar _tmp88 = std::exp(theta_rot(3, 0));
    const Scalar _tmp89 = w(2, 0) - w_d(2, 0);
    const Scalar _tmp90 = -_tmp88*_tmp89;
    const Scalar _tmp91 = _tmp33*_tmp4;
    const Scalar _tmp92 = std::pow(_tmp45, Scalar(Scalar(-3)/Scalar(2)));
    const Scalar _tmp93 = (Scalar(1)/Scalar(4))*_tmp68;
    const Scalar _tmp94 = _tmp6*_tmp93;
    const Scalar _tmp95 = _tmp51*_tmp94;
    const Scalar _tmp96 = _tmp92*_tmp95;
    const Scalar _tmp97 = std::pow(_tmp49, Scalar(Scalar(-3)/Scalar(2)));
    const Scalar _tmp98 = _tmp97/std::pow(_tmp45, Scalar(2));
    const Scalar _tmp99 = _tmp53*_tmp98;
    const Scalar _tmp100 = _tmp44*_tmp99;
    const Scalar _tmp101 = _tmp20*_tmp91;
    const Scalar _tmp102 = _tmp4*_tmp58;
    const Scalar _tmp103 = _tmp39*_tmp99;
    const Scalar _tmp104 = _tmp103*_tmp6;
    const Scalar _tmp105 = _tmp104*_tmp91;
    const Scalar _tmp106 = _tmp39*_tmp92;
    const Scalar _tmp107 = _tmp106*_tmp6;
    const Scalar _tmp108 = _tmp107*_tmp54;
    const Scalar _tmp109 = _tmp108*_tmp4;
    const Scalar _tmp110 = _tmp105 - _tmp109;
    const Scalar _tmp111 = _tmp44*_tmp92;
    const Scalar _tmp112 = _tmp111*_tmp54;
    const Scalar _tmp113 = _tmp112*_tmp4;
    const Scalar _tmp114 = -_tmp100*_tmp101 - _tmp102*_tmp20 + _tmp110*_tmp40 + _tmp113*_tmp20 + _tmp91*_tmp96;
    const Scalar _tmp115 = _tmp64 + _tmp66 + _tmp69;
    const Scalar _tmp116 = std::fabs(_tmp115);
    const Scalar _tmp117 = std::min<Scalar>(Scalar(0.99999899999999997), _tmp116);
    const Scalar _tmp118 = 1 - std::pow(_tmp117, Scalar(2));
    const Scalar _tmp119 = _tmp70*((((Scalar(0.99999899999999997) - _tmp116) > 0) - ((Scalar(0.99999899999999997) - _tmp116) < 0)) + 1)*(((_tmp115) > 0) - ((_tmp115) < 0));
    const Scalar _tmp120 = _tmp119/_tmp118;
    const Scalar _tmp121 = _tmp62*_tmp63;
    const Scalar _tmp122 = _tmp120*_tmp121;
    const Scalar _tmp123 = std::acos(_tmp117);
    const Scalar _tmp124 = _tmp117*_tmp119*_tmp123/(_tmp118 * std::sqrt(_tmp118));
    const Scalar _tmp125 = _tmp121*_tmp124;
    const Scalar _tmp126 = (Scalar(1)/Scalar(4))*_tmp52;
    const Scalar _tmp127 = _tmp126*_tmp51;
    const Scalar _tmp128 = _tmp127*_tmp6;
    const Scalar _tmp129 = _tmp128*_tmp92;
    const Scalar _tmp130 = _tmp40*_tmp91;
    const Scalar _tmp131 = _tmp57*_tmp91;
    const Scalar _tmp132 = _tmp123/std::sqrt(_tmp118);
    const Scalar _tmp133 = _tmp132*_tmp72;
    const Scalar _tmp134 = _tmp132*_tmp73;
    const Scalar _tmp135 = 1 - std::pow(Scalar(std::tanh((Scalar(1)/Scalar(268))*_tmp134 - Scalar(1)/Scalar(268)*_tmp78)), Scalar(2));
    const Scalar _tmp136 = _tmp21*_tmp44;
    const Scalar _tmp137 = _tmp136*_tmp92;
    const Scalar _tmp138 = _tmp137*_tmp54;
    const Scalar _tmp139 = _tmp136*_tmp99;
    const Scalar _tmp140 = _tmp63*_tmp81;
    const Scalar _tmp141 = _tmp124*_tmp140;
    const Scalar _tmp142 = _tmp120*_tmp140;
    const Scalar _tmp143 = _tmp133*_tmp81;
    const Scalar _tmp144 = 1 - std::pow(Scalar(std::tanh((Scalar(1)/Scalar(268))*_tmp143 - Scalar(1)/Scalar(268)*_tmp83)), Scalar(2));
    const Scalar _tmp145 = _tmp85*_tmp86;
    const Scalar _tmp146 = _tmp124*_tmp145;
    const Scalar _tmp147 = _tmp120*_tmp145;
    const Scalar _tmp148 = _tmp132*_tmp87;
    const Scalar _tmp149 = _tmp148*_tmp85;
    const Scalar _tmp150 = 1 - std::pow(Scalar(std::tanh((Scalar(1)/Scalar(56))*_tmp149 - Scalar(1)/Scalar(56)*_tmp90)), Scalar(2));
    const Scalar _tmp151 = _tmp4*_tmp41;
    const Scalar _tmp152 = _tmp43*_tmp99;
    const Scalar _tmp153 = _tmp152*_tmp33;
    const Scalar _tmp154 = _tmp43*_tmp92;
    const Scalar _tmp155 = _tmp154*_tmp54;
    const Scalar _tmp156 = _tmp102 + _tmp153*_tmp4 - _tmp155*_tmp4;
    const Scalar _tmp157 = _tmp106*_tmp51*_tmp93;
    const Scalar _tmp158 = -_tmp105*_tmp20 + _tmp109*_tmp20 + _tmp156*_tmp40 + _tmp157*_tmp91;
    const Scalar _tmp159 = _tmp106*_tmp127;
    const Scalar _tmp160 = _tmp120*_tmp158;
    const Scalar _tmp161 = _tmp21*_tmp6;
    const Scalar _tmp162 = _tmp103*_tmp161;
    const Scalar _tmp163 = _tmp159*_tmp57;
    const Scalar _tmp164 = _tmp33*_tmp54;
    const Scalar _tmp165 = _tmp106*_tmp164;
    const Scalar _tmp166 = 2*_tmp46;
    const Scalar _tmp167 = 2*_tmp42;
    const Scalar _tmp168 = _tmp167*_tmp92;
    const Scalar _tmp169 = -_tmp166*_tmp31 + _tmp168*_tmp31;
    const Scalar _tmp170 = _tmp126*_tmp47;
    const Scalar _tmp171 = _tmp170*_tmp97;
    const Scalar _tmp172 = -_tmp165*_tmp31 + _tmp169*_tmp171;
    const Scalar _tmp173 = _tmp164*_tmp92;
    const Scalar _tmp174 = _tmp173*_tmp6;
    const Scalar _tmp175 = _tmp174*_tmp20;
    const Scalar _tmp176 = (Scalar(1)/Scalar(8))*_tmp68;
    const Scalar _tmp177 = _tmp176*_tmp51;
    const Scalar _tmp178 = _tmp46*_tmp6;
    const Scalar _tmp179 = _tmp178*_tmp97;
    const Scalar _tmp180 = _tmp126*_tmp179;
    const Scalar _tmp181 = _tmp169*_tmp180;
    const Scalar _tmp182 = _tmp169*_tmp177 + _tmp172*_tmp40 + _tmp175*_tmp31 - _tmp181*_tmp20;
    const Scalar _tmp183 = (Scalar(1)/Scalar(8))*_tmp52;
    const Scalar _tmp184 = _tmp183*_tmp51;
    const Scalar _tmp185 = _tmp184*_tmp40;
    const Scalar _tmp186 = _tmp174*_tmp57;
    const Scalar _tmp187 = _tmp161*_tmp173;
    const Scalar _tmp188 = _tmp184*_tmp20;
    const Scalar _tmp189 = _tmp179*_tmp93;
    const Scalar _tmp190 = _tmp174*_tmp40;
    const Scalar _tmp191 = _tmp184*_tmp57;
    const Scalar _tmp192 = _tmp0*_tmp112;
    const Scalar _tmp193 = _tmp0*_tmp33;
    const Scalar _tmp194 = _tmp0*_tmp58;
    const Scalar _tmp195 = _tmp100*_tmp193;
    const Scalar _tmp196 = _tmp0*_tmp108;
    const Scalar _tmp197 = _tmp193*_tmp6;
    const Scalar _tmp198 = _tmp103*_tmp197;
    const Scalar _tmp199 = -_tmp196 + _tmp198;
    const Scalar _tmp200 = _tmp192*_tmp20 + _tmp193*_tmp96 - _tmp194*_tmp20 - _tmp195*_tmp20 + _tmp199*_tmp40;
    const Scalar _tmp201 = _tmp127*_tmp197*_tmp92;
    const Scalar _tmp202 = _tmp193*_tmp40;
    const Scalar _tmp203 = _tmp0*_tmp41;
    const Scalar _tmp204 = _tmp0*_tmp153 - _tmp0*_tmp155 + _tmp194;
    const Scalar _tmp205 = _tmp157*_tmp193 + _tmp196*_tmp20 - _tmp198*_tmp20 + _tmp204*_tmp40;
    const Scalar _tmp206 = _tmp159*_tmp20;
    const Scalar _tmp207 = -_tmp166*_tmp27 + _tmp168*_tmp27;
    const Scalar _tmp208 = _tmp207*_tmp97;
    const Scalar _tmp209 = -_tmp165*_tmp27 + _tmp170*_tmp208;
    const Scalar _tmp210 = _tmp126*_tmp20;
    const Scalar _tmp211 = _tmp178*_tmp208;
    const Scalar _tmp212 = _tmp175*_tmp27 + _tmp177*_tmp207 + _tmp209*_tmp40 - _tmp210*_tmp211;
    const Scalar _tmp213 = _tmp126*_tmp211;
    const Scalar _tmp214 = _tmp178*_tmp93;
    const Scalar _tmp215 = _tmp2*_tmp58;
    const Scalar _tmp216 = _tmp2*_tmp33;
    const Scalar _tmp217 = _tmp20*_tmp216;
    const Scalar _tmp218 = _tmp104*_tmp216;
    const Scalar _tmp219 = _tmp2*_tmp54;
    const Scalar _tmp220 = _tmp107*_tmp219;
    const Scalar _tmp221 = _tmp218 - _tmp220;
    const Scalar _tmp222 = _tmp111*_tmp219;
    const Scalar _tmp223 = -_tmp100*_tmp217 - _tmp20*_tmp215 + _tmp20*_tmp222 + _tmp216*_tmp96 + _tmp221*_tmp40;
    const Scalar _tmp224 = _tmp216*_tmp57;
    const Scalar _tmp225 = _tmp216*_tmp40;
    const Scalar _tmp226 = _tmp2*_tmp41;
    const Scalar _tmp227 = _tmp152*_tmp216 - _tmp154*_tmp219 + _tmp215;
    const Scalar _tmp228 = _tmp157*_tmp216 - _tmp20*_tmp218 + _tmp20*_tmp220 + _tmp227*_tmp40;
    const Scalar _tmp229 = _tmp29*_tmp92;
    const Scalar _tmp230 = _tmp164*_tmp229;
    const Scalar _tmp231 = -_tmp166*_tmp29 + _tmp167*_tmp229;
    const Scalar _tmp232 = _tmp171*_tmp231 - _tmp230*_tmp39;
    const Scalar _tmp233 = _tmp57*_tmp6;
    const Scalar _tmp234 = _tmp180*_tmp57;
    const Scalar _tmp235 = _tmp230*_tmp6;
    const Scalar _tmp236 = _tmp180*_tmp20;
    const Scalar _tmp237 = _tmp177*_tmp231 + _tmp20*_tmp235 - _tmp231*_tmp236 + _tmp232*_tmp40;
    const Scalar _tmp238 = _tmp180*_tmp40;
    const Scalar _tmp239 = _tmp11*std::pow(_tmp21, Scalar(2));
    const Scalar _tmp240 = _tmp19*_tmp22;
    const Scalar _tmp241 = _tmp14/(_tmp10 * std::sqrt(_tmp10));
    const Scalar _tmp242 = _tmp22*_tmp241;
    const Scalar _tmp243 = _tmp242*_tmp7;
    const Scalar _tmp244 = logR(0, 0)*logR(1, 0);
    const Scalar _tmp245 = 4*_tmp15/std::pow(_tmp10, Scalar(2));
    const Scalar _tmp246 = _tmp245*logR(2, 0);
    const Scalar _tmp247 = _tmp242*_tmp244;
    const Scalar _tmp248 = -_tmp244*_tmp246 + _tmp247*logR(2, 0);
    const Scalar _tmp249 = _tmp245*_tmp9;
    const Scalar _tmp250 = [&]() { const Scalar base = logR(0, 0); return base * base * base; }();
    const Scalar _tmp251 = 4*_tmp16;
    const Scalar _tmp252 = _tmp242*_tmp9;
    const Scalar _tmp253 = _tmp243*logR(2, 0);
    const Scalar _tmp254 = _tmp239*_tmp244;
    const Scalar _tmp255 = _tmp16*_tmp244;
    const Scalar _tmp256 = _tmp246*_tmp7;
    const Scalar _tmp257 = logR(0, 0)*logR(2, 0);
    const Scalar _tmp258 = _tmp214*_tmp51;
    const Scalar _tmp259 = _tmp11*_tmp258;
    const Scalar _tmp260 = _tmp257*_tmp259;
    const Scalar _tmp261 = _tmp241*_tmp61;
    const Scalar _tmp262 = _tmp19*_tmp61;
    const Scalar _tmp263 = _tmp11*_tmp7;
    const Scalar _tmp264 = _tmp176*_tmp50;
    const Scalar _tmp265 = _tmp241*_tmp59;
    const Scalar _tmp266 = _tmp257*_tmp265;
    const Scalar _tmp267 = _tmp244*_tmp259;
    const Scalar _tmp268 = (Scalar(1)/Scalar(2))*_tmp56;
    const Scalar _tmp269 = _tmp183*_tmp50;
    const Scalar _tmp270 = _tmp244*_tmp265;
    const Scalar _tmp271 = _tmp241*_tmp55;
    const Scalar _tmp272 = _tmp263*_tmp268 + _tmp267 - _tmp269*_tmp40 - _tmp270 - _tmp271*_tmp7 + _tmp65;
    const Scalar _tmp273 = _tmp11*_tmp268;
    const Scalar _tmp274 = _tmp257*_tmp273;
    const Scalar _tmp275 = _tmp257*_tmp271;
    const Scalar _tmp276 = _tmp127*_tmp178;
    const Scalar _tmp277 = _tmp11*_tmp264;
    const Scalar _tmp278 = -_tmp244*_tmp261 + _tmp244*_tmp277;
    const Scalar _tmp279 = _tmp19*_tmp59;
    const Scalar _tmp280 = -_tmp244*_tmp271 + _tmp244*_tmp273;
    const Scalar _tmp281 = -_tmp257*_tmp261 + _tmp257*_tmp277;
    const Scalar _tmp282 = _tmp249*logR(2, 0);
    const Scalar _tmp283 = _tmp252*logR(2, 0);
    const Scalar _tmp284 = _tmp245*logR(1, 0);
    const Scalar _tmp285 = [&]() { const Scalar base = logR(1, 0); return base * base * base; }();
    const Scalar _tmp286 = -_tmp20*_tmp269 + _tmp259*_tmp9 - _tmp265*_tmp9 + _tmp279 + _tmp280;
    const Scalar _tmp287 = logR(1, 0)*logR(2, 0);
    const Scalar _tmp288 = _tmp259*_tmp287 - _tmp265*_tmp287;
    const Scalar _tmp289 = _tmp271*_tmp287;
    const Scalar _tmp290 = _tmp273*_tmp287;
    const Scalar _tmp291 = -_tmp261*_tmp287 + _tmp277*_tmp287;
    const Scalar _tmp292 = _tmp8*logR(0, 0);
    const Scalar _tmp293 = _tmp11*_tmp8;
    const Scalar _tmp294 = -_tmp269*_tmp57 + _tmp274 - _tmp275 + _tmp288;
    const Scalar _tmp295 = _tmp135*_tmp76;
    const Scalar _tmp296 = _tmp144*_tmp76;
    const Scalar _tmp297 = _tmp150*_tmp88;
    const Scalar _tmp298 = 2*_tmp6;
    const Scalar _tmp299 = 2*_tmp39;
    const Scalar _tmp300 = -_tmp298*_tmp5 - _tmp299*_tmp38;
    const Scalar _tmp301 = _tmp33*_tmp98;
    const Scalar _tmp302 = _tmp126*_tmp39;
    const Scalar _tmp303 = _tmp301*_tmp302;
    const Scalar _tmp304 = _tmp159*_tmp300 - _tmp300*_tmp303 + _tmp38*_tmp58;
    const Scalar _tmp305 = _tmp210*_tmp6;
    const Scalar _tmp306 = _tmp301*_tmp305;
    const Scalar _tmp307 = _tmp5*_tmp58;
    const Scalar _tmp308 = _tmp300*_tmp92;
    const Scalar _tmp309 = _tmp177*_tmp33;
    const Scalar _tmp310 = _tmp128*_tmp308;
    const Scalar _tmp311 = -_tmp20*_tmp307 - _tmp20*_tmp310 + _tmp300*_tmp306 + _tmp304*_tmp40 - _tmp308*_tmp309;
    const Scalar _tmp312 = _tmp126*_tmp301;
    const Scalar _tmp313 = _tmp233*_tmp312;
    const Scalar _tmp314 = _tmp308*_tmp33;
    const Scalar _tmp315 = _tmp57*_tmp58;
    const Scalar _tmp316 = _tmp301*_tmp94;
    const Scalar _tmp317 = _tmp40*_tmp6;
    const Scalar _tmp318 = _tmp312*_tmp317;
    const Scalar _tmp319 = -_tmp166*_tmp32 + _tmp168*_tmp32;
    const Scalar _tmp320 = -_tmp165*_tmp32 + _tmp171*_tmp319;
    const Scalar _tmp321 = _tmp175*_tmp32 + _tmp177*_tmp319 - _tmp236*_tmp319 + _tmp320*_tmp40;
    const Scalar _tmp322 = -_tmp1*_tmp298 - _tmp299*_tmp35;
    const Scalar _tmp323 = _tmp159*_tmp322 - _tmp303*_tmp322 + _tmp35*_tmp58;
    const Scalar _tmp324 = _tmp322*_tmp92;
    const Scalar _tmp325 = _tmp128*_tmp324;
    const Scalar _tmp326 = _tmp324*_tmp33;
    const Scalar _tmp327 = _tmp1*_tmp58;
    const Scalar _tmp328 = -_tmp20*_tmp325 - _tmp20*_tmp327 + _tmp306*_tmp322 - _tmp309*_tmp324 + _tmp323*_tmp40;
    const Scalar _tmp329 = -_tmp166*_tmp28 + _tmp168*_tmp28;
    const Scalar _tmp330 = _tmp179*_tmp329;
    const Scalar _tmp331 = _tmp126*_tmp330;
    const Scalar _tmp332 = -_tmp165*_tmp28 + _tmp171*_tmp329;
    const Scalar _tmp333 = _tmp175*_tmp28 + _tmp177*_tmp329 - _tmp20*_tmp331 + _tmp332*_tmp40;
    const Scalar _tmp334 = _tmp3*_tmp58;
    const Scalar _tmp335 = -_tmp298*_tmp3 - _tmp299*_tmp37;
    const Scalar _tmp336 = _tmp301*_tmp335;
    const Scalar _tmp337 = _tmp159*_tmp335 - _tmp302*_tmp336 + _tmp37*_tmp58;
    const Scalar _tmp338 = _tmp19*_tmp337;
    const Scalar _tmp339 = _tmp335*_tmp92;
    const Scalar _tmp340 = _tmp128*_tmp339;
    const Scalar _tmp341 = -_tmp20*_tmp334 - _tmp20*_tmp340 + _tmp305*_tmp336 - _tmp309*_tmp339 + _tmp338*logR(0, 0);
    const Scalar _tmp342 = _tmp120*_tmp341;
    const Scalar _tmp343 = _tmp33*_tmp339;
    const Scalar _tmp344 = _tmp126*_tmp336;
    const Scalar _tmp345 = -_tmp166*_tmp30 + _tmp168*_tmp30;
    const Scalar _tmp346 = -_tmp165*_tmp30 + _tmp171*_tmp345;
    const Scalar _tmp347 = _tmp180*_tmp345;
    const Scalar _tmp348 = _tmp175*_tmp30 + _tmp177*_tmp345 - _tmp20*_tmp347 + _tmp346*_tmp40;

    // Output terms (2)
    if ( thrust_torque != nullptr ) {
        Eigen::Matrix<Scalar, 4, 1>& _thrust_torque = (*thrust_torque);


        _thrust_torque(0, 0) = _tmp23*_tmp6 + _tmp26*_tmp33 + _tmp39*_tmp41;
        _thrust_torque(1, 0) = -268*std::tanh((Scalar(1)/Scalar(268))*_tmp73*_tmp75 - Scalar(1)/Scalar(268)*_tmp78);
        _thrust_torque(2, 0) = -268*std::tanh((Scalar(1)/Scalar(268))*_tmp72*_tmp75*_tmp81 - Scalar(1)/Scalar(268)*_tmp83);
        _thrust_torque(3, 0) = -56*std::tanh((Scalar(1)/Scalar(56))*_tmp75*_tmp85*_tmp87 - Scalar(1)/Scalar(56)*_tmp90);
    }

    if ( jacobian != nullptr ) {
        Eigen::Matrix<Scalar, 4, 25>& _jacobian = (*jacobian);


        _jacobian(0, 0) = -_tmp23*_tmp4;
        _jacobian(1, 0) = _tmp135*(_tmp114*_tmp122 - _tmp114*_tmp125 - _tmp133*(-_tmp100*_tmp131 - _tmp102*_tmp57 - _tmp110*_tmp21 + _tmp113*_tmp57 + _tmp129*_tmp130));
        _jacobian(2, 0) = _tmp144*(-_tmp114*_tmp141 + _tmp114*_tmp142 - _tmp133*(_tmp101*_tmp129 + _tmp102*_tmp21 - _tmp110*_tmp57 - _tmp138*_tmp4 + _tmp139*_tmp91));
        _jacobian(3, 0) = _tmp150*(-_tmp114*_tmp146 + _tmp114*_tmp147 - _tmp148*(_tmp100*_tmp130 + _tmp102*_tmp40 + _tmp110*_tmp20 - _tmp113*_tmp40 + _tmp129*_tmp131));
        _jacobian(0, 1) = -_tmp151;
        _jacobian(1, 1) = _tmp135*(_tmp121*_tmp160 - _tmp125*_tmp158 - _tmp133*(-_tmp105*_tmp57 + _tmp109*_tmp57 + _tmp130*_tmp159 - _tmp156*_tmp21));
        _jacobian(2, 1) = _tmp144*(-_tmp133*(_tmp101*_tmp159 - _tmp109*_tmp21 - _tmp156*_tmp57 + _tmp162*_tmp91) + _tmp140*_tmp160 - _tmp141*_tmp158);
        _jacobian(3, 1) = _tmp150*(_tmp145*_tmp160 - _tmp146*_tmp158 - _tmp148*(_tmp105*_tmp40 - _tmp109*_tmp40 + _tmp156*_tmp20 + _tmp163*_tmp91));
        _jacobian(0, 2) = -_tmp26*_tmp31;
        _jacobian(1, 2) = _tmp135*(_tmp122*_tmp182 - _tmp125*_tmp182 - _tmp133*(_tmp169*_tmp185 - _tmp172*_tmp21 - _tmp181*_tmp57 + _tmp186*_tmp31));
        _jacobian(2, 2) = _tmp144*(-_tmp133*(_tmp169*_tmp188 + _tmp169*_tmp189 - _tmp172*_tmp57 - _tmp187*_tmp31) - _tmp141*_tmp182 + _tmp142*_tmp182);
        _jacobian(3, 2) = _tmp150*(-_tmp146*_tmp182 + _tmp147*_tmp182 - _tmp148*(_tmp169*_tmp191 + _tmp172*_tmp20 + _tmp181*_tmp40 - _tmp190*_tmp31));
        _jacobian(0, 3) = -_tmp0*_tmp23;
        _jacobian(1, 3) = _tmp135*(_tmp122*_tmp200 - _tmp125*_tmp200 - _tmp133*(_tmp192*_tmp57 - _tmp194*_tmp57 - _tmp195*_tmp57 - _tmp199*_tmp21 + _tmp201*_tmp40));
        _jacobian(2, 3) = _tmp144*(-_tmp133*(-_tmp0*_tmp138 + _tmp139*_tmp193 + _tmp194*_tmp21 - _tmp199*_tmp57 + _tmp20*_tmp201) - _tmp141*_tmp200 + _tmp142*_tmp200);
        _jacobian(3, 3) = _tmp150*(-_tmp146*_tmp200 + _tmp147*_tmp200 - _tmp148*(_tmp100*_tmp202 - _tmp192*_tmp40 + _tmp194*_tmp40 + _tmp199*_tmp20 + _tmp201*_tmp57));
        _jacobian(0, 4) = -_tmp203;
        _jacobian(1, 4) = _tmp135*(_tmp122*_tmp205 - _tmp125*_tmp205 - _tmp133*(_tmp159*_tmp202 + _tmp196*_tmp57 - _tmp198*_tmp57 - _tmp204*_tmp21));
        _jacobian(2, 4) = _tmp144*(-_tmp133*(_tmp162*_tmp193 + _tmp193*_tmp206 - _tmp196*_tmp21 - _tmp204*_tmp57) - _tmp141*_tmp205 + _tmp142*_tmp205);
        _jacobian(3, 4) = _tmp150*(-_tmp146*_tmp205 + _tmp147*_tmp205 - _tmp148*(_tmp163*_tmp193 - _tmp196*_tmp40 + _tmp198*_tmp40 + _tmp20*_tmp204));
        _jacobian(0, 5) = -_tmp26*_tmp27;
        _jacobian(1, 5) = _tmp135*(_tmp122*_tmp212 - _tmp125*_tmp212 - _tmp133*(_tmp185*_tmp207 + _tmp186*_tmp27 - _tmp209*_tmp21 - _tmp213*_tmp57));
        _jacobian(2, 5) = _tmp144*(-_tmp133*(-_tmp187*_tmp27 + _tmp188*_tmp207 + _tmp208*_tmp214 - _tmp209*_tmp57) - _tmp141*_tmp212 + _tmp142*_tmp212);
        _jacobian(3, 5) = _tmp150*(-_tmp146*_tmp212 + _tmp147*_tmp212 - _tmp148*(-_tmp190*_tmp27 + _tmp191*_tmp207 + _tmp20*_tmp209 + _tmp213*_tmp40));
        _jacobian(0, 6) = -_tmp2*_tmp23;
        _jacobian(1, 6) = _tmp135*(_tmp122*_tmp223 - _tmp125*_tmp223 - _tmp133*(-_tmp100*_tmp224 + _tmp129*_tmp225 - _tmp21*_tmp221 - _tmp215*_tmp57 + _tmp222*_tmp57));
        _jacobian(2, 6) = _tmp144*(-_tmp133*(_tmp129*_tmp217 - _tmp137*_tmp219 + _tmp139*_tmp216 + _tmp21*_tmp215 - _tmp221*_tmp57) - _tmp141*_tmp223 + _tmp142*_tmp223);
        _jacobian(3, 6) = _tmp150*(-_tmp146*_tmp223 + _tmp147*_tmp223 - _tmp148*(_tmp100*_tmp225 + _tmp129*_tmp224 + _tmp20*_tmp221 + _tmp215*_tmp40 - _tmp222*_tmp40));
        _jacobian(0, 7) = -_tmp226;
        _jacobian(1, 7) = _tmp135*(_tmp122*_tmp228 - _tmp125*_tmp228 - _tmp133*(_tmp159*_tmp225 - _tmp21*_tmp227 - _tmp218*_tmp57 + _tmp220*_tmp57));
        _jacobian(2, 7) = _tmp144*(-_tmp133*(_tmp162*_tmp216 + _tmp206*_tmp216 - _tmp21*_tmp220 - _tmp227*_tmp57) - _tmp141*_tmp228 + _tmp142*_tmp228);
        _jacobian(3, 7) = _tmp150*(-_tmp146*_tmp228 + _tmp147*_tmp228 - _tmp148*(_tmp159*_tmp224 + _tmp20*_tmp227 + _tmp218*_tmp40 - _tmp220*_tmp40));
        _jacobian(0, 8) = -_tmp26*_tmp29;
        _jacobian(1, 8) = _tmp135*(_tmp122*_tmp237 - _tmp125*_tmp237 - _tmp133*(_tmp185*_tmp231 - _tmp21*_tmp232 + _tmp230*_tmp233 - _tmp231*_tmp234));
        _jacobian(2, 8) = _tmp144*(-_tmp133*(-_tmp161*_tmp230 + _tmp188*_tmp231 + _tmp189*_tmp231 - _tmp232*_tmp57) - _tmp141*_tmp237 + _tmp142*_tmp237);
        _jacobian(3, 8) = _tmp150*(-_tmp146*_tmp237 + _tmp147*_tmp237 - _tmp148*(_tmp191*_tmp231 + _tmp20*_tmp232 + _tmp231*_tmp238 - _tmp235*_tmp40));
        _jacobian(0, 9) = _tmp33*(-_tmp242*_tmp250 + _tmp245*_tmp250 + _tmp249*logR(0, 0) - _tmp251*logR(0, 0) - _tmp252*logR(0, 0)) + _tmp39*(-_tmp239*_tmp7 - _tmp240 + _tmp243 + _tmp248 + _tmp25) + _tmp6*(_tmp18 - _tmp247 + _tmp253 + _tmp254 - _tmp255 - _tmp256);
        _jacobian(1, 9) = _tmp135*(_tmp122*_tmp272 - _tmp125*_tmp272 - _tmp133*(_tmp260 - _tmp261*_tmp7 + _tmp262 + _tmp263*_tmp264 - _tmp266 + (Scalar(1)/Scalar(2))*_tmp66));
        _jacobian(2, 9) = _tmp144*(-_tmp133*(-_tmp274 + _tmp275 + _tmp276*_tmp40 + _tmp278) - _tmp141*_tmp272 + _tmp142*_tmp272);
        _jacobian(3, 9) = _tmp150*(-_tmp146*_tmp272 + _tmp147*_tmp272 - _tmp148*(-_tmp258*_tmp263 + _tmp265*_tmp7 - _tmp279 + _tmp280 + _tmp281));
        _jacobian(0, 10) = _tmp33*(-_tmp242*_tmp285 - _tmp243*logR(1, 0) + _tmp245*_tmp285 - _tmp251*logR(1, 0) + _tmp284*_tmp7) + _tmp39*(_tmp18 + _tmp247 - _tmp254 + _tmp255 - _tmp282 + _tmp283) + _tmp6*(_tmp239*_tmp9 - _tmp24 + _tmp240 + _tmp248 - _tmp252);
        _jacobian(1, 10) = _tmp135*(_tmp122*_tmp286 - _tmp125*_tmp286 - _tmp133*(_tmp278 + _tmp288 + (Scalar(1)/Scalar(2))*_tmp84));
        _jacobian(2, 10) = _tmp144*(-_tmp133*(_tmp20*_tmp276 - _tmp261*_tmp9 + _tmp262 + _tmp277*_tmp9 + _tmp289 - _tmp290) - _tmp141*_tmp286 + _tmp142*_tmp286);
        _jacobian(3, 10) = _tmp150*(-_tmp146*_tmp286 + _tmp147*_tmp286 - _tmp148*(-_tmp267 + _tmp270 - _tmp271*_tmp9 + _tmp273*_tmp9 + _tmp291 + _tmp65));
        _jacobian(0, 11) = _tmp33*(-_tmp253 + _tmp256 + _tmp282 - _tmp283) + _tmp39*(_tmp16*_tmp257 + _tmp17*logR(1, 0) - _tmp239*_tmp257 + _tmp242*_tmp257 + _tmp242*_tmp8*logR(1, 0) - _tmp284*_tmp8) + _tmp6*(-_tmp16*_tmp287 + _tmp17*logR(0, 0) + _tmp239*_tmp287 - _tmp242*_tmp287 + _tmp242*_tmp292 - _tmp245*_tmp292);
        _jacobian(1, 11) = _tmp135*(_tmp122*_tmp294 - _tmp125*_tmp294 - _tmp133*(_tmp258*_tmp293 - _tmp265*_tmp8 + _tmp279 + _tmp281 + (Scalar(1)/Scalar(2))*_tmp80));
        _jacobian(2, 11) = _tmp144*(-_tmp133*(_tmp271*_tmp8 - _tmp273*_tmp8 + _tmp276*_tmp57 + _tmp291 - _tmp65) - _tmp141*_tmp294 + _tmp142*_tmp294);
        _jacobian(3, 11) = _tmp150*(-_tmp146*_tmp294 + _tmp147*_tmp294 - _tmp148*(-_tmp260 - _tmp261*_tmp8 + _tmp262 + _tmp264*_tmp293 + _tmp266 - _tmp289 + _tmp290));
        _jacobian(0, 12) = 0;
        _jacobian(1, 12) = -_tmp295;
        _jacobian(2, 12) = 0;
        _jacobian(3, 12) = 0;
        _jacobian(0, 13) = 0;
        _jacobian(1, 13) = 0;
        _jacobian(2, 13) = -_tmp296;
        _jacobian(3, 13) = 0;
        _jacobian(0, 14) = 0;
        _jacobian(1, 14) = 0;
        _jacobian(2, 14) = 0;
        _jacobian(3, 14) = -_tmp297;
        _jacobian(0, 15) = -_tmp151*ierr(1, 0) - _tmp23*_tmp5;
        _jacobian(1, 15) = _tmp135*(_tmp122*_tmp311 - _tmp125*_tmp311 - _tmp133*(-_tmp185*_tmp314 - _tmp21*_tmp304 + _tmp300*_tmp313 - _tmp310*_tmp57 - _tmp315*_tmp5));
        _jacobian(2, 15) = _tmp144*(-_tmp133*(-_tmp188*_tmp314 - _tmp300*_tmp316 - _tmp304*_tmp57 + _tmp308*_tmp95 + _tmp5*_tmp79) - _tmp141*_tmp311 + _tmp142*_tmp311);
        _jacobian(3, 15) = _tmp150*(-_tmp146*_tmp311 + _tmp147*_tmp311 - _tmp148*(-_tmp191*_tmp314 + _tmp20*_tmp304 - _tmp300*_tmp318 + _tmp307*_tmp40 + _tmp310*_tmp40));
        _jacobian(0, 16) = -_tmp26*_tmp32;
        _jacobian(1, 16) = _tmp135*(_tmp122*_tmp321 - _tmp125*_tmp321 - _tmp133*(_tmp185*_tmp319 + _tmp186*_tmp32 - _tmp21*_tmp320 - _tmp234*_tmp319));
        _jacobian(2, 16) = _tmp144*(-_tmp133*(-_tmp187*_tmp32 + _tmp188*_tmp319 + _tmp189*_tmp319 - _tmp320*_tmp57) - _tmp141*_tmp321 + _tmp142*_tmp321);
        _jacobian(3, 16) = _tmp150*(-_tmp146*_tmp321 + _tmp147*_tmp321 - _tmp148*(-_tmp190*_tmp32 + _tmp191*_tmp319 + _tmp20*_tmp320 + _tmp238*_tmp319));
        _jacobian(0, 17) = -_tmp1*_tmp23 - _tmp203*_tmp34;
        _jacobian(1, 17) = _tmp135*(_tmp122*_tmp328 - _tmp125*_tmp328 - _tmp133*(-_tmp1*_tmp315 - _tmp185*_tmp326 - _tmp21*_tmp323 + _tmp313*_tmp322 - _tmp325*_tmp57));
        _jacobian(2, 17) = _tmp144*(-_tmp133*(_tmp1*_tmp79 - _tmp188*_tmp326 - _tmp316*_tmp322 - _tmp323*_tmp57 + _tmp324*_tmp95) - _tmp141*_tmp328 + _tmp142*_tmp328);
        _jacobian(3, 17) = _tmp150*(-_tmp146*_tmp328 + _tmp147*_tmp328 - _tmp148*(-_tmp191*_tmp326 + _tmp20*_tmp323 - _tmp318*_tmp322 + _tmp325*_tmp40 + _tmp327*_tmp40));
        _jacobian(0, 18) = -_tmp26*_tmp28;
        _jacobian(1, 18) = _tmp135*(_tmp122*_tmp333 - _tmp125*_tmp333 - _tmp133*(_tmp185*_tmp329 + _tmp186*_tmp28 - _tmp21*_tmp332 - _tmp331*_tmp57));
        _jacobian(2, 18) = _tmp144*(-_tmp133*(-_tmp187*_tmp28 + _tmp188*_tmp329 + _tmp330*_tmp93 - _tmp332*_tmp57) - _tmp141*_tmp333 + _tmp142*_tmp333);
        _jacobian(3, 18) = _tmp150*(-_tmp146*_tmp333 + _tmp147*_tmp333 - _tmp148*(-_tmp190*_tmp28 + _tmp191*_tmp329 + _tmp20*_tmp332 + _tmp331*_tmp40));
        _jacobian(0, 19) = -_tmp226*_tmp36 - _tmp23*_tmp3;
        _jacobian(1, 19) = _tmp135*(_tmp121*_tmp342 - _tmp125*_tmp341 - _tmp133*(-_tmp185*_tmp343 - _tmp21*_tmp337 + _tmp233*_tmp344 - _tmp3*_tmp315 - _tmp340*_tmp57));
        _jacobian(2, 19) = _tmp144*(-_tmp133*(-_tmp188*_tmp343 + _tmp3*_tmp79 - _tmp336*_tmp94 - _tmp338*logR(2, 0) + _tmp339*_tmp95) + _tmp140*_tmp342 - _tmp141*_tmp341);
        _jacobian(3, 19) = _tmp150*(_tmp145*_tmp342 - _tmp146*_tmp341 - _tmp148*(-_tmp191*_tmp343 + _tmp20*_tmp337 - _tmp317*_tmp344 + _tmp334*_tmp40 + _tmp340*_tmp40));
        _jacobian(0, 20) = -_tmp26*_tmp30;
        _jacobian(1, 20) = _tmp135*(_tmp122*_tmp348 - _tmp125*_tmp348 - _tmp133*(_tmp185*_tmp345 + _tmp186*_tmp30 - _tmp21*_tmp346 - _tmp347*_tmp57));
        _jacobian(2, 20) = _tmp144*(-_tmp133*(-_tmp187*_tmp30 + _tmp188*_tmp345 + _tmp189*_tmp345 - _tmp346*_tmp57) - _tmp141*_tmp348 + _tmp142*_tmp348);
        _jacobian(3, 20) = _tmp150*(-_tmp146*_tmp348 + _tmp147*_tmp348 - _tmp148*(-_tmp190*_tmp30 + _tmp191*_tmp345 + _tmp20*_tmp346 + _tmp347*_tmp40));
        _jacobian(0, 21) = 0;
        _jacobian(1, 21) = -_tmp134*_tmp135;
        _jacobian(2, 21) = -_tmp143*_tmp144;
        _jacobian(3, 21) = 0;
        _jacobian(0, 22) = 0;
        _jacobian(1, 22) = 0;
        _jacobian(2, 22) = 0;
        _jacobian(3, 22) = -_tmp149*_tmp150;
        _jacobian(0, 23) = 0;
        _jacobian(1, 23) = -_tmp295*_tmp77;
        _jacobian(2, 23) = -_tmp296*_tmp82;
        _jacobian(3, 23) = 0;
        _jacobian(0, 24) = 0;
        _jacobian(1, 24) = 0;
        _jacobian(2, 24) = 0;
        _jacobian(3, 24) = -_tmp297*_tmp89;
    }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
