// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>



namespace sym {


/**
* This function was autogenerated from a symbolic function. Do not modify by hand.
*
* Symbolic function: dynamics_symfn
*
* Args:
*     ierr: Matrix31
*     p: Matrix31
*     v: Matrix31
*     logR: Matrix31
*     w: Matrix31
*     p_d: Matrix31
*     thrust: Scalar
*     torque: Matrix31
*     dt: Scalar
*
* Outputs:
*     ierr_p_v_logR_w: Matrix15_1
*     jacobian: (15x19) jacobian of ierr_p_v_logR_w wrt args ierr (3), p (3), v (3), logR (3), w
*               (3), thrust (1), torque (3)
*/
template <typename Scalar>
void Dynamics(const Eigen::Matrix<Scalar, 3, 1>& ierr, const Eigen::Matrix<Scalar, 3, 1>& p, const Eigen::Matrix<Scalar, 3, 1>& v, const Eigen::Matrix<Scalar, 3, 1>& logR, const Eigen::Matrix<Scalar, 3, 1>& w, const Eigen::Matrix<Scalar, 3, 1>& p_d, const Scalar thrust, const Eigen::Matrix<Scalar, 3, 1>& torque, const Scalar dt, Eigen::Matrix<Scalar, 15, 1>* const ierr_p_v_logR_w = nullptr, Eigen::Matrix<Scalar, 15, 19>* const jacobian = nullptr) {

    // Total ops: 716

    // Input arrays

    // Intermediate terms (240)
    const Scalar _tmp0 = std::pow(logR(0, 0), Scalar(2));
    const Scalar _tmp1 = std::pow(logR(2, 0), Scalar(2));
    const Scalar _tmp2 = std::pow(logR(1, 0), Scalar(2));
    const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + Scalar(9.9999999999999998e-13);
    const Scalar _tmp4 = Scalar(1.0) / (_tmp3);
    const Scalar _tmp5 = _tmp4*logR(2, 0);
    const Scalar _tmp6 = std::sqrt(_tmp3);
    const Scalar _tmp7 = (Scalar(1)/Scalar(2))*_tmp6;
    const Scalar _tmp8 = std::sin(_tmp7);
    const Scalar _tmp9 = std::pow(_tmp8, Scalar(2));
    const Scalar _tmp10 = 2*_tmp9;
    const Scalar _tmp11 = _tmp10*_tmp5;
    const Scalar _tmp12 = Scalar(1.0) / (_tmp6);
    const Scalar _tmp13 = _tmp12*_tmp8;
    const Scalar _tmp14 = std::cos(_tmp7);
    const Scalar _tmp15 = 2*_tmp14;
    const Scalar _tmp16 = _tmp13*_tmp15;
    const Scalar _tmp17 = dt*(_tmp11*logR(0, 0) + _tmp16*logR(1, 0));
    const Scalar _tmp18 = _tmp4*logR(1, 0);
    const Scalar _tmp19 = _tmp18*_tmp9;
    const Scalar _tmp20 = 2*_tmp19;
    const Scalar _tmp21 = dt*(-_tmp16*logR(0, 0) + _tmp20*logR(2, 0));
    const Scalar _tmp22 = _tmp2*_tmp4;
    const Scalar _tmp23 = _tmp22*_tmp9;
    const Scalar _tmp24 = _tmp0*_tmp4;
    const Scalar _tmp25 = _tmp24*_tmp9;
    const Scalar _tmp26 = -2*_tmp23 - 2*_tmp25 + 1;
    const Scalar _tmp27 = std::pow(w(2, 0), Scalar(2));
    const Scalar _tmp28 = std::pow(dt, Scalar(2));
    const Scalar _tmp29 = std::pow(w(1, 0), Scalar(2));
    const Scalar _tmp30 = std::pow(w(0, 0), Scalar(2));
    const Scalar _tmp31 = _tmp27*_tmp28 + _tmp28*_tmp29 + _tmp28*_tmp30 + Scalar(9.9999999999999998e-13);
    const Scalar _tmp32 = std::sqrt(_tmp31);
    const Scalar _tmp33 = (Scalar(1)/Scalar(2))*_tmp32;
    const Scalar _tmp34 = std::sin(_tmp33);
    const Scalar _tmp35 = _tmp14*_tmp34;
    const Scalar _tmp36 = Scalar(1.0) / (_tmp32);
    const Scalar _tmp37 = _tmp36*dt;
    const Scalar _tmp38 = _tmp35*_tmp37;
    const Scalar _tmp39 = _tmp38*w(0, 0);
    const Scalar _tmp40 = _tmp34*_tmp37;
    const Scalar _tmp41 = _tmp13*_tmp40;
    const Scalar _tmp42 = _tmp41*w(2, 0);
    const Scalar _tmp43 = _tmp41*w(1, 0);
    const Scalar _tmp44 = _tmp43*logR(2, 0);
    const Scalar _tmp45 = std::cos(_tmp33);
    const Scalar _tmp46 = _tmp45*_tmp8;
    const Scalar _tmp47 = _tmp12*_tmp46;
    const Scalar _tmp48 = _tmp47*logR(0, 0);
    const Scalar _tmp49 = _tmp39 + _tmp42*logR(1, 0) - _tmp44 + _tmp48;
    const Scalar _tmp50 = _tmp14*_tmp45;
    const Scalar _tmp51 = _tmp43*logR(1, 0);
    const Scalar _tmp52 = _tmp41*logR(0, 0);
    const Scalar _tmp53 = _tmp52*w(0, 0);
    const Scalar _tmp54 = _tmp42*logR(2, 0) + _tmp51 + _tmp53;
    const Scalar _tmp55 = _tmp50 - _tmp54;
    const Scalar _tmp56 = std::fabs(_tmp55);
    const Scalar _tmp57 = std::min<Scalar>(Scalar(0.99999899999999997), _tmp56);
    const Scalar _tmp58 = 1 - std::pow(_tmp57, Scalar(2));
    const Scalar _tmp59 = std::acos(_tmp57);
    const Scalar _tmp60 = (((_tmp55) > 0) - ((_tmp55) < 0));
    const Scalar _tmp61 = 2*std::min<Scalar>(0, _tmp60) + 1;
    const Scalar _tmp62 = 2*_tmp61;
    const Scalar _tmp63 = _tmp59*_tmp62/std::sqrt(_tmp58);
    const Scalar _tmp64 = _tmp38*w(1, 0);
    const Scalar _tmp65 = _tmp41*w(0, 0);
    const Scalar _tmp66 = _tmp65*logR(2, 0);
    const Scalar _tmp67 = _tmp47*logR(1, 0);
    const Scalar _tmp68 = -_tmp42*logR(0, 0) + _tmp64 + _tmp66 + _tmp67;
    const Scalar _tmp69 = _tmp41*logR(1, 0);
    const Scalar _tmp70 = _tmp69*w(0, 0);
    const Scalar _tmp71 = _tmp47*logR(2, 0);
    const Scalar _tmp72 = _tmp38*w(2, 0);
    const Scalar _tmp73 = _tmp43*logR(0, 0);
    const Scalar _tmp74 = -_tmp70 + _tmp71 + _tmp72 + _tmp73;
    const Scalar _tmp75 = std::pow(_tmp3, Scalar(Scalar(-3)/Scalar(2)));
    const Scalar _tmp76 = _tmp75*_tmp8;
    const Scalar _tmp77 = _tmp15*_tmp76;
    const Scalar _tmp78 = _tmp0*_tmp77;
    const Scalar _tmp79 = _tmp78*logR(2, 0);
    const Scalar _tmp80 = std::pow(_tmp14, Scalar(2));
    const Scalar _tmp81 = _tmp18*_tmp80;
    const Scalar _tmp82 = _tmp81*logR(0, 0);
    const Scalar _tmp83 = _tmp19*logR(0, 0);
    const Scalar _tmp84 = 4*_tmp9;
    const Scalar _tmp85 = _tmp84/std::pow(_tmp3, Scalar(2));
    const Scalar _tmp86 = _tmp85*logR(2, 0);
    const Scalar _tmp87 = _tmp0*_tmp86;
    const Scalar _tmp88 = logR(0, 0)*logR(1, 0);
    const Scalar _tmp89 = _tmp77*_tmp88;
    const Scalar _tmp90 = dt*thrust;
    const Scalar _tmp91 = -_tmp86*_tmp88 + _tmp89*logR(2, 0);
    const Scalar _tmp92 = _tmp2*_tmp85;
    const Scalar _tmp93 = [&]() { const Scalar base = logR(0, 0); return base * base * base; }();
    const Scalar _tmp94 = _tmp4*logR(0, 0);
    const Scalar _tmp95 = _tmp2*_tmp77;
    const Scalar _tmp96 = (Scalar(1)/Scalar(2))*_tmp48;
    const Scalar _tmp97 = _tmp5*logR(0, 0);
    const Scalar _tmp98 = (Scalar(1)/Scalar(2))*_tmp72;
    const Scalar _tmp99 = _tmp97*_tmp98;
    const Scalar _tmp100 = logR(0, 0)*logR(2, 0);
    const Scalar _tmp101 = _tmp40*_tmp76;
    const Scalar _tmp102 = _tmp101*w(2, 0);
    const Scalar _tmp103 = _tmp100*_tmp102;
    const Scalar _tmp104 = (Scalar(1)/Scalar(2))*_tmp39;
    const Scalar _tmp105 = _tmp101*w(0, 0);
    const Scalar _tmp106 = _tmp101*w(1, 0);
    const Scalar _tmp107 = (Scalar(1)/Scalar(2))*logR(0, 0);
    const Scalar _tmp108 = _tmp107*_tmp18;
    const Scalar _tmp109 = -_tmp106*_tmp88 + _tmp108*_tmp64;
    const Scalar _tmp110 = -_tmp0*_tmp105 - _tmp103 + _tmp104*_tmp24 + _tmp109 + _tmp65 + _tmp96 + _tmp99;
    const Scalar _tmp111 = -_tmp50 + _tmp54;
    const Scalar _tmp112 = std::fabs(_tmp111);
    const Scalar _tmp113 = std::min<Scalar>(Scalar(0.99999899999999997), _tmp112);
    const Scalar _tmp114 = 1 - std::pow(_tmp113, Scalar(2));
    const Scalar _tmp115 = ((((Scalar(0.99999899999999997) - _tmp112) > 0) - ((Scalar(0.99999899999999997) - _tmp112) < 0)) + 1)*(((_tmp111) > 0) - ((_tmp111) < 0));
    const Scalar _tmp116 = _tmp115/_tmp114;
    const Scalar _tmp117 = _tmp49*_tmp61;
    const Scalar _tmp118 = _tmp116*_tmp117;
    const Scalar _tmp119 = _tmp102*_tmp88;
    const Scalar _tmp120 = _tmp100*_tmp106;
    const Scalar _tmp121 = (Scalar(1)/Scalar(2))*_tmp50;
    const Scalar _tmp122 = _tmp46*_tmp75;
    const Scalar _tmp123 = _tmp108*_tmp72;
    const Scalar _tmp124 = (Scalar(1)/Scalar(2))*_tmp64;
    const Scalar _tmp125 = _tmp124*_tmp97;
    const Scalar _tmp126 = std::acos(_tmp113);
    const Scalar _tmp127 = _tmp126*_tmp62/std::sqrt(_tmp114);
    const Scalar _tmp128 = _tmp113*_tmp115*_tmp126/(_tmp114 * std::sqrt(_tmp114));
    const Scalar _tmp129 = _tmp110*_tmp128;
    const Scalar _tmp130 = _tmp61*_tmp68;
    const Scalar _tmp131 = _tmp116*_tmp130;
    const Scalar _tmp132 = _tmp0*_tmp101;
    const Scalar _tmp133 = _tmp121*_tmp18;
    const Scalar _tmp134 = -_tmp122*_tmp88 + _tmp133*logR(0, 0);
    const Scalar _tmp135 = -_tmp100*_tmp105 + _tmp104*_tmp97;
    const Scalar _tmp136 = _tmp105*_tmp88;
    const Scalar _tmp137 = (Scalar(1)/Scalar(2))*w(2, 0);
    const Scalar _tmp138 = _tmp104*_tmp18;
    const Scalar _tmp139 = _tmp138*logR(0, 0);
    const Scalar _tmp140 = _tmp122*logR(2, 0);
    const Scalar _tmp141 = _tmp121*_tmp97 - _tmp140*logR(0, 0);
    const Scalar _tmp142 = _tmp61*_tmp74;
    const Scalar _tmp143 = _tmp116*_tmp142;
    const Scalar _tmp144 = _tmp92*logR(2, 0);
    const Scalar _tmp145 = _tmp95*logR(2, 0);
    const Scalar _tmp146 = _tmp85*logR(1, 0);
    const Scalar _tmp147 = [&]() { const Scalar base = logR(1, 0); return base * base * base; }();
    const Scalar _tmp148 = (Scalar(1)/Scalar(2))*_tmp67;
    const Scalar _tmp149 = logR(1, 0)*logR(2, 0);
    const Scalar _tmp150 = _tmp18*logR(2, 0);
    const Scalar _tmp151 = -_tmp102*_tmp149 + _tmp150*_tmp98;
    const Scalar _tmp152 = -_tmp106*_tmp2 + _tmp124*_tmp22 - _tmp136 + _tmp139 + _tmp148 + _tmp151 + _tmp43;
    const Scalar _tmp153 = _tmp128*_tmp152;
    const Scalar _tmp154 = _tmp124*_tmp150;
    const Scalar _tmp155 = _tmp106*_tmp149;
    const Scalar _tmp156 = _tmp105*_tmp149;
    const Scalar _tmp157 = _tmp138*logR(2, 0);
    const Scalar _tmp158 = _tmp133*logR(2, 0) - _tmp140*logR(1, 0);
    const Scalar _tmp159 = _tmp1*logR(0, 0);
    const Scalar _tmp160 = _tmp77*logR(1, 0);
    const Scalar _tmp161 = _tmp1*_tmp4;
    const Scalar _tmp162 = (Scalar(1)/Scalar(2))*_tmp71;
    const Scalar _tmp163 = -_tmp1*_tmp102 + _tmp135 + _tmp154 - _tmp155 + _tmp161*_tmp98 + _tmp162 + _tmp42;
    const Scalar _tmp164 = _tmp116*_tmp163;
    const Scalar _tmp165 = _tmp128*_tmp163;
    const Scalar _tmp166 = _tmp41*logR(2, 0);
    const Scalar _tmp167 = _tmp28*_tmp36;
    const Scalar _tmp168 = _tmp167*_tmp35;
    const Scalar _tmp169 = (Scalar(1)/Scalar(2))*_tmp168;
    const Scalar _tmp170 = Scalar(1.0) / (_tmp31);
    const Scalar _tmp171 = [&]() { const Scalar base = dt; return base * base * base; }();
    const Scalar _tmp172 = _tmp171*_tmp30;
    const Scalar _tmp173 = _tmp170*_tmp172;
    const Scalar _tmp174 = _tmp171*w(0, 0);
    const Scalar _tmp175 = _tmp174*w(2, 0);
    const Scalar _tmp176 = std::pow(_tmp31, Scalar(Scalar(-3)/Scalar(2)));
    const Scalar _tmp177 = _tmp13*_tmp34;
    const Scalar _tmp178 = _tmp176*_tmp177;
    const Scalar _tmp179 = _tmp178*logR(2, 0);
    const Scalar _tmp180 = _tmp175*_tmp179;
    const Scalar _tmp181 = _tmp178*logR(0, 0);
    const Scalar _tmp182 = _tmp162*_tmp170;
    const Scalar _tmp183 = _tmp175*_tmp182;
    const Scalar _tmp184 = -_tmp52;
    const Scalar _tmp185 = _tmp148*_tmp170;
    const Scalar _tmp186 = _tmp174*w(1, 0);
    const Scalar _tmp187 = _tmp178*logR(1, 0);
    const Scalar _tmp188 = -_tmp185*_tmp186 + _tmp186*_tmp187;
    const Scalar _tmp189 = -_tmp169*w(0, 0) + _tmp172*_tmp181 - _tmp173*_tmp96 + _tmp180 - _tmp183 + _tmp184 + _tmp188;
    const Scalar _tmp190 = _tmp60*((((Scalar(0.99999899999999997) - _tmp56) > 0) - ((Scalar(0.99999899999999997) - _tmp56) < 0)) + 1);
    const Scalar _tmp191 = _tmp190/_tmp58;
    const Scalar _tmp192 = _tmp189*_tmp191;
    const Scalar _tmp193 = _tmp182*_tmp186;
    const Scalar _tmp194 = _tmp167*_tmp177;
    const Scalar _tmp195 = _tmp107*_tmp194;
    const Scalar _tmp196 = _tmp175*_tmp185;
    const Scalar _tmp197 = _tmp121*_tmp170;
    const Scalar _tmp198 = _tmp176*_tmp35;
    const Scalar _tmp199 = _tmp179*_tmp186;
    const Scalar _tmp200 = _tmp175*_tmp187;
    const Scalar _tmp201 = _tmp190*_tmp57*_tmp59/(_tmp58 * std::sqrt(_tmp58));
    const Scalar _tmp202 = _tmp117*_tmp201;
    const Scalar _tmp203 = _tmp130*_tmp201;
    const Scalar _tmp204 = _tmp194*logR(1, 0);
    const Scalar _tmp205 = (Scalar(1)/Scalar(2))*w(0, 0);
    const Scalar _tmp206 = _tmp172*_tmp178;
    const Scalar _tmp207 = _tmp171*_tmp198;
    const Scalar _tmp208 = _tmp207*w(0, 0);
    const Scalar _tmp209 = _tmp171*_tmp197;
    const Scalar _tmp210 = _tmp209*w(0, 0);
    const Scalar _tmp211 = -_tmp208*w(1, 0) + _tmp210*w(1, 0);
    const Scalar _tmp212 = _tmp170*_tmp96;
    const Scalar _tmp213 = _tmp175*_tmp181 - _tmp175*_tmp212;
    const Scalar _tmp214 = -_tmp69;
    const Scalar _tmp215 = _tmp194*logR(2, 0);
    const Scalar _tmp216 = _tmp181*_tmp186;
    const Scalar _tmp217 = _tmp186*_tmp212;
    const Scalar _tmp218 = -_tmp208*w(2, 0) + _tmp210*w(2, 0);
    const Scalar _tmp219 = _tmp142*_tmp201;
    const Scalar _tmp220 = w(1, 0)*w(2, 0);
    const Scalar _tmp221 = _tmp171*_tmp220;
    const Scalar _tmp222 = _tmp185*_tmp221;
    const Scalar _tmp223 = _tmp187*_tmp221;
    const Scalar _tmp224 = -_tmp166;
    const Scalar _tmp225 = _tmp171*_tmp29;
    const Scalar _tmp226 = _tmp170*_tmp225;
    const Scalar _tmp227 = _tmp178*_tmp225;
    const Scalar _tmp228 = _tmp179*_tmp221 - _tmp182*_tmp221;
    const Scalar _tmp229 = -_tmp169*w(1, 0) - _tmp185*_tmp225 + _tmp214 + _tmp216 - _tmp217 + _tmp227*logR(1, 0) + _tmp228;
    const Scalar _tmp230 = _tmp191*_tmp229;
    const Scalar _tmp231 = _tmp181*_tmp221;
    const Scalar _tmp232 = (Scalar(1)/Scalar(2))*w(1, 0);
    const Scalar _tmp233 = _tmp212*_tmp221;
    const Scalar _tmp234 = -_tmp207*_tmp220 + _tmp209*_tmp220;
    const Scalar _tmp235 = _tmp171*_tmp27;
    const Scalar _tmp236 = _tmp170*_tmp235;
    const Scalar _tmp237 = _tmp178*_tmp235;
    const Scalar _tmp238 = -_tmp137*_tmp168 - _tmp162*_tmp236 + _tmp213 - _tmp222 + _tmp223 + _tmp224 + _tmp237*logR(2, 0);
    const Scalar _tmp239 = _tmp191*_tmp238;

    // Output terms (2)
    if ( ierr_p_v_logR_w != nullptr ) {
        Eigen::Matrix<Scalar, 15, 1>& _ierr_p_v_logR_w = (*ierr_p_v_logR_w);


        _ierr_p_v_logR_w(0, 0) = dt*(p(0, 0) - p_d(0, 0)) + ierr(0, 0);
        _ierr_p_v_logR_w(1, 0) = dt*(p(1, 0) - p_d(1, 0)) + ierr(1, 0);
        _ierr_p_v_logR_w(2, 0) = dt*(p(2, 0) - p_d(2, 0)) + ierr(2, 0);
        _ierr_p_v_logR_w(3, 0) = dt*v(0, 0) + p(0, 0);
        _ierr_p_v_logR_w(4, 0) = dt*v(1, 0) + p(1, 0);
        _ierr_p_v_logR_w(5, 0) = dt*v(2, 0) + p(2, 0);
        _ierr_p_v_logR_w(6, 0) = _tmp17*thrust + v(0, 0);
        _ierr_p_v_logR_w(7, 0) = _tmp21*thrust + v(1, 0);
        _ierr_p_v_logR_w(8, 0) = dt*(_tmp26*thrust + Scalar(-9.8100000000000005)) + v(2, 0);
        _ierr_p_v_logR_w(9, 0) = _tmp49*_tmp63;
        _ierr_p_v_logR_w(10, 0) = _tmp63*_tmp68;
        _ierr_p_v_logR_w(11, 0) = _tmp63*_tmp74;
        _ierr_p_v_logR_w(12, 0) = dt*torque(0, 0) + w(0, 0);
        _ierr_p_v_logR_w(13, 0) = dt*torque(1, 0) + w(1, 0);
        _ierr_p_v_logR_w(14, 0) = dt*torque(2, 0) + w(2, 0);
    }

    if ( jacobian != nullptr ) {
        Eigen::Matrix<Scalar, 15, 19>& _jacobian = (*jacobian);

        _jacobian.setZero();

        _jacobian(0, 0) = 1;
        _jacobian(1, 1) = 1;
        _jacobian(2, 2) = 1;
        _jacobian(0, 3) = dt;
        _jacobian(3, 3) = 1;
        _jacobian(1, 4) = dt;
        _jacobian(4, 4) = 1;
        _jacobian(2, 5) = dt;
        _jacobian(5, 5) = 1;
        _jacobian(3, 6) = dt;
        _jacobian(6, 6) = 1;
        _jacobian(4, 7) = dt;
        _jacobian(7, 7) = 1;
        _jacobian(5, 8) = dt;
        _jacobian(8, 8) = 1;
        _jacobian(6, 9) = _tmp90*(_tmp11 + _tmp79 + _tmp82 - _tmp83 - _tmp87 - _tmp89);
        _jacobian(7, 9) = _tmp90*(-_tmp16 - _tmp24*_tmp80 + _tmp25 + _tmp78 + _tmp91);
        _jacobian(8, 9) = _tmp90*(-_tmp77*_tmp93 - _tmp84*_tmp94 + _tmp85*_tmp93 + _tmp92*logR(0, 0) - _tmp95*logR(0, 0));
        _jacobian(9, 9) = -_tmp110*_tmp118 + _tmp117*_tmp129 + _tmp127*(-_tmp0*_tmp122 - _tmp119 + _tmp120 + _tmp121*_tmp24 + _tmp123 - _tmp125 + _tmp47 - Scalar(1)/Scalar(2)*_tmp53);
        _jacobian(10, 9) = -_tmp110*_tmp131 + _tmp127*(_tmp132*w(2, 0) + _tmp134 + _tmp135 - _tmp24*_tmp98 - _tmp42 - Scalar(1)/Scalar(2)*_tmp73) + _tmp129*_tmp130;
        _jacobian(11, 9) = -_tmp110*_tmp143 + _tmp127*(_tmp124*_tmp24 - _tmp132*w(1, 0) + _tmp136 - _tmp137*_tmp52 - _tmp139 + _tmp141 + _tmp43) + _tmp129*_tmp142;
        _jacobian(6, 10) = _tmp90*(_tmp16 + _tmp22*_tmp80 - _tmp23 + _tmp91 - _tmp95);
        _jacobian(7, 10) = _tmp90*(_tmp11 - _tmp144 + _tmp145 - _tmp82 + _tmp83 + _tmp89);
        _jacobian(8, 10) = _tmp90*(_tmp0*_tmp146 - _tmp147*_tmp77 + _tmp147*_tmp85 - 4*_tmp19 - _tmp78*logR(1, 0));
        _jacobian(9, 10) = _tmp117*_tmp153 - _tmp118*_tmp152 + _tmp127*(-_tmp102*_tmp2 + _tmp134 - _tmp154 + _tmp155 + _tmp22*_tmp98 + _tmp42 - Scalar(1)/Scalar(2)*_tmp70);
        _jacobian(10, 10) = _tmp127*(_tmp119 + _tmp121*_tmp22 - _tmp122*_tmp2 - _tmp123 - _tmp156 + _tmp157 + _tmp47 - Scalar(1)/Scalar(2)*_tmp51) + _tmp130*_tmp153 - _tmp131*_tmp152;
        _jacobian(11, 10) = _tmp127*(-_tmp104*_tmp22 + _tmp105*_tmp2 + _tmp109 - _tmp137*_tmp69 + _tmp158 - _tmp65) + _tmp142*_tmp153 - _tmp143*_tmp152;
        _jacobian(6, 11) = _tmp90*(_tmp10*_tmp94 + _tmp159*_tmp77 - _tmp159*_tmp85 - _tmp160*logR(2, 0) - _tmp19*logR(2, 0) + _tmp81*logR(2, 0));
        _jacobian(7, 11) = _tmp90*(-_tmp1*_tmp146 + _tmp1*_tmp160 + _tmp100*_tmp77 + _tmp20 - _tmp80*_tmp97 + _tmp9*_tmp97);
        _jacobian(8, 11) = _tmp90*(_tmp144 - _tmp145 - _tmp79 + _tmp87);
        _jacobian(9, 11) = -_tmp117*_tmp164 + _tmp117*_tmp165 + _tmp127*(_tmp1*_tmp106 - _tmp124*_tmp161 + _tmp141 + _tmp151 - _tmp43 - Scalar(1)/Scalar(2)*_tmp66);
        _jacobian(10, 11) = _tmp127*(-_tmp1*_tmp105 + _tmp103 + _tmp104*_tmp161 + _tmp158 - Scalar(1)/Scalar(2)*_tmp44 + _tmp65 - _tmp99) + _tmp130*_tmp165 - _tmp131*_tmp163;
        _jacobian(11, 11) = _tmp127*(-_tmp1*_tmp122 - _tmp120 + _tmp121*_tmp161 + _tmp125 - _tmp137*_tmp166 + _tmp156 - _tmp157 + _tmp47) - _tmp142*_tmp164 + _tmp142*_tmp165;
        _jacobian(9, 12) = -_tmp117*_tmp192 + _tmp189*_tmp202 + _tmp63*(_tmp172*_tmp197 - _tmp172*_tmp198 - _tmp193 - _tmp195*w(0, 0) + _tmp196 + _tmp199 - _tmp200 + _tmp38);
        _jacobian(10, 12) = -_tmp130*_tmp192 + _tmp189*_tmp203 + _tmp63*(_tmp162*_tmp173 + _tmp166 - _tmp204*_tmp205 - _tmp206*logR(2, 0) + _tmp211 + _tmp213);
        _jacobian(11, 12) = -_tmp142*_tmp192 + _tmp189*_tmp219 + _tmp63*(-_tmp172*_tmp185 - _tmp205*_tmp215 + _tmp206*logR(1, 0) + _tmp214 - _tmp216 + _tmp217 + _tmp218);
        _jacobian(12, 12) = 1;
        _jacobian(9, 13) = -_tmp117*_tmp230 + _tmp202*_tmp229 + _tmp63*(-_tmp162*_tmp226 - _tmp195*w(1, 0) + _tmp211 + _tmp222 - _tmp223 + _tmp224 + _tmp227*logR(2, 0));
        _jacobian(10, 13) = -_tmp130*_tmp230 + _tmp203*_tmp229 + _tmp63*(_tmp193 - _tmp199 - _tmp204*_tmp232 - _tmp207*_tmp29 + _tmp209*_tmp29 + _tmp231 - _tmp233 + _tmp38);
        _jacobian(11, 13) = -_tmp142*_tmp230 + _tmp219*_tmp229 + _tmp63*(-_tmp181*_tmp225 + _tmp188 - _tmp215*_tmp232 + _tmp226*_tmp96 + _tmp234 + _tmp52);
        _jacobian(13, 13) = 1;
        _jacobian(9, 14) = -_tmp117*_tmp239 + _tmp202*_tmp238 + _tmp63*(-_tmp137*_tmp194*logR(0, 0) + _tmp148*_tmp236 + _tmp218 + _tmp228 - _tmp237*logR(1, 0) + _tmp69);
        _jacobian(10, 14) = -_tmp130*_tmp239 + _tmp203*_tmp238 + _tmp63*(-_tmp137*_tmp204 - _tmp180 + _tmp183 + _tmp184 + _tmp234 - _tmp236*_tmp96 + _tmp237*logR(0, 0));
        _jacobian(11, 14) = -_tmp142*_tmp239 + _tmp219*_tmp238 + _tmp63*(-_tmp137*_tmp215 - _tmp196 + _tmp197*_tmp235 + _tmp200 - _tmp207*_tmp27 - _tmp231 + _tmp233 + _tmp38);
        _jacobian(14, 14) = 1;
        _jacobian(6, 15) = _tmp17;
        _jacobian(7, 15) = _tmp21;
        _jacobian(8, 15) = _tmp26*dt;
        _jacobian(12, 16) = dt;
        _jacobian(13, 17) = dt;
        _jacobian(14, 18) = dt;
    }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
